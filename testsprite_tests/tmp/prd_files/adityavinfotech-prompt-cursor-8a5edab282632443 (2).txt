Directory structure:
└── adityavinfotech-prompt-cursor/
    ├── README.md
    ├── components.json
    ├── next.config.mjs
    ├── package.json
    ├── pnpm-lock.yaml
    ├── postcss.config.mjs
    ├── test-api-integration.js
    ├── test-iteration-workflow.md
    ├── tsconfig.json
    ├── app/
    │   ├── globals.css
    │   ├── layout.tsx
    │   ├── page.tsx
    │   ├── analyse/
    │   │   └── page.tsx
    │   ├── api/
    │   │   ├── analyze/
    │   │   │   └── route.ts
    │   │   ├── prompts/
    │   │   │   ├── route.ts
    │   │   │   └── improve/
    │   │   │       └── route.ts
    │   │   └── questions/
    │   │       └── route.ts
    │   ├── app/
    │   │   └── page.tsx
    │   └── prompts/
    │       └── page.tsx
    ├── components/
    │   ├── ai-provider-toggle.tsx
    │   ├── analysis-panel.tsx
    │   ├── edit-section.tsx
    │   ├── header.tsx
    │   ├── history-panel.tsx
    │   ├── improve-prompt-dialog.tsx
    │   ├── improve-prompt-input-dialog.tsx
    │   ├── iteration-display.tsx
    │   ├── mode-toggle.tsx
    │   ├── multi-step-form.tsx
    │   ├── prompts-panel.tsx
    │   ├── requirement-input.tsx
    │   ├── theme-provider.tsx
    │   ├── top-navigation.tsx
    │   └── ui/
    │       ├── accordion.tsx
    │       ├── alert-dialog.tsx
    │       ├── alert.tsx
    │       ├── aspect-ratio.tsx
    │       ├── avatar.tsx
    │       ├── badge.tsx
    │       ├── breadcrumb.tsx
    │       ├── button.tsx
    │       ├── calendar.tsx
    │       ├── card.tsx
    │       ├── carousel.tsx
    │       ├── chart.tsx
    │       ├── checkbox.tsx
    │       ├── collapsible.tsx
    │       ├── command.tsx
    │       ├── context-menu.tsx
    │       ├── dialog.tsx
    │       ├── drawer.tsx
    │       ├── dropdown-menu.tsx
    │       ├── form.tsx
    │       ├── hover-card.tsx
    │       ├── input-otp.tsx
    │       ├── input.tsx
    │       ├── label.tsx
    │       ├── menubar.tsx
    │       ├── navigation-menu.tsx
    │       ├── pagination.tsx
    │       ├── popover.tsx
    │       ├── progress.tsx
    │       ├── radio-group.tsx
    │       ├── resizable.tsx
    │       ├── scroll-area.tsx
    │       ├── select.tsx
    │       ├── separator.tsx
    │       ├── sheet.tsx
    │       ├── sidebar.tsx
    │       ├── skeleton.tsx
    │       ├── slider.tsx
    │       ├── sonner.tsx
    │       ├── switch.tsx
    │       ├── table.tsx
    │       ├── tabs.tsx
    │       ├── textarea.tsx
    │       ├── toast.tsx
    │       ├── toaster.tsx
    │       ├── toggle-group.tsx
    │       ├── toggle.tsx
    │       ├── tooltip.tsx
    │       ├── use-mobile.tsx
    │       └── use-toast.ts
    ├── hooks/
    │   ├── use-iterations.ts
    │   ├── use-mobile.ts
    │   └── use-toast.ts
    ├── landing-page/
    │   ├── globals.css
    │   ├── landing.tsx
    │   ├── page (1).tsx
    │   └── page.tsx
    ├── lib/
    │   ├── ai-service.ts
    │   ├── ai-types.ts
    │   ├── analysis-service.ts
    │   ├── env.ts
    │   ├── gemini.ts
    │   ├── iteration-utils.ts
    │   ├── openai.ts
    │   ├── prompt-config.ts
    │   ├── prompt-service.ts
    │   ├── prompt-templates.ts
    │   ├── session-utils.ts
    │   ├── telemetry.ts
    │   └── utils.ts
    └── styles/
        └── globals.css

================================================
FILE: README.md
================================================
# AI IDE Prompt Agent

A Next.js application that transforms plain-text feature requirements into structured, IDE-specific prompts using Google's Gemini AI. The application analyzes requirements, generates clarifying questions, and produces optimized prompts for different AI-powered development environments.

## Features

### 🧠 Intelligent Requirement Analysis
- **Automated Analysis**: Extract goals, constraints, dependencies, edge cases, and acceptance criteria from natural language requirements
- **Smart Question Generation**: Generate contextual clarifying questions to resolve ambiguities
- **Assumption Management**: Identify implicit assumptions with confidence scores
- **Interactive Refinement**: Update analysis based on user feedback

### 🚀 Multi-IDE Prompt Generation
Generate optimized prompts for popular AI development tools:
- **Cursor**: Detailed implementation plans with step-by-step guidance
- **GitHub Copilot**: Concise, code-generation focused prompts
- **Warp Terminal**: Command-line and workflow-focused instructions
- **Windsurf**: Comprehensive architecture and design-focused prompts

### 🤖 Dual AI Provider Support
Choose between two powerful AI models:
- **Google Gemini**: Fast, cost-effective analysis with good performance
- **OpenAI GPT-4**: Premium quality with advanced reasoning capabilities

### 💡 User Experience
- **Real-time Validation**: Input validation with character limits and feedback
- **Session Management**: Save and restore previous analyses
- **Error Handling**: Comprehensive error messages and retry mechanisms
- **Dark/Light Theme**: Responsive design with theme switching
- **Export Functionality**: Download prompts as JSON files

## Technology Stack

### Frontend
- **Framework**: Next.js 15.2.4 with App Router
- **Language**: TypeScript with strict configuration
- **Styling**: Tailwind CSS 4.1.9 with custom design tokens
- **UI Components**: Shadcn/ui with Radix UI primitives
- **State Management**: React useState
- **Theme**: next-themes for dark/light mode switching

### Backend & AI
- **LLM Providers**: 
  - Google Gemini AI (gemini-1.5-flash model)
  - OpenAI GPT-4 (gpt-4o-mini model)
- **API Routes**: Next.js API routes for server-side processing
- **Validation**: Zod for request/response validation
- **Rate Limiting**: Built-in rate limiting (10 requests/minute per provider)
- **Error Handling**: Comprehensive error boundaries and user feedback

## Installation & Setup

### Prerequisites
- Node.js 18+ 
- npm or yarn package manager
- Google AI Studio account and API key
- OpenAI account and API key (optional, for GPT-4 support)

### 1. Clone and Install Dependencies
```bash
git clone <repository-url>
cd ai-ide-prompt-agent
npm install
```

### 2. Environment Configuration
Create a `.env.local` file in the root directory:
```env
# Gemini API Configuration
GEMINI_API_KEY=your_gemini_api_key_here

# OpenAI API Configuration (optional)
OPENAI_API_KEY=your_openai_api_key_here

# Next.js Configuration (optional)
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

**Getting your Gemini API Key:**
1. Visit [Google AI Studio](https://makersuite.google.com/app/apikey)
2. Create a new API key
3. Copy and paste it into your `.env.local` file

**Getting your OpenAI API Key:**
1. Visit [OpenAI Platform](https://platform.openai.com/api-keys)
2. Create a new API key
3. Copy and paste it into your `.env.local` file

### 3. Run the Development Server
```bash
npm run dev
```

Visit [http://localhost:3000](http://localhost:3000) to access the application.

## Usage Guide

### 1. Input Requirements
- Enter your feature requirement in the text area (10-2000 characters)
- Be specific and detailed for better analysis results
- Click "Analyze Requirement" to process your input

### 2. Review Analysis
The analysis will include:
- **Goals**: Main objectives and desired outcomes
- **Constraints**: Technical and business limitations
- **Dependencies**: Required systems, libraries, or prerequisites
- **Edge Cases**: Potential failure scenarios
- **Acceptance Criteria**: Testable success conditions
- **Questions**: Clarifying questions with priority levels
- **Assumptions**: Implicit assumptions with confidence scores

### 3. Answer Questions (Optional)
- Review and answer any clarifying questions
- Questions are prioritized as "critical", "important", or "nice-to-have"
- Your answers will refine the final prompts

### 4. Accept/Reject Assumptions
- Review generated assumptions about your requirement
- Toggle assumptions on/off based on your needs
- Confidence scores help you evaluate assumption reliability

### 5. Generate IDE Prompts
- Click "Generate IDE Prompts" to create tailored prompts
- Switch between tabs to view different IDE-specific formats
- Copy prompts directly to your clipboard
- Export all prompts as a JSON file

### 6. Session Management
- View previous sessions in the History tab
- Load previous analyses to build upon or reference
- Sessions include timestamps and completion status

## API Endpoints

### POST /api/analyze
Analyzes a feature requirement and extracts structured information.

**Request:**
```json
{
  "requirement": "Add OAuth login with Google and GitHub..."
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "goals": ["..."],
    "constraints": ["..."],
    "dependencies": ["..."],
    "edgeCases": ["..."],
    "acceptanceCriteria": ["..."],
    "questions": [{"id": "q1", "text": "...", "priority": "critical"}],
    "assumptions": [{"id": "a1", "text": "...", "confidence": 0.8, "accepted": true}]
  }
}
```

### POST /api/prompts
Generates IDE-specific prompts based on analysis results.

**Request:**
```json
{
  "requirement": "...",
  "analysis": {...},
  "answeredQuestions": [...],
  "acceptedAssumptions": [...]
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "cursor": "# Implementation Guide...",
    "copilot": "Create a system that...",
    "warp": "## Terminal Workflow...",
    "windsurf": "### Architecture Overview..."
  }
}
```

### POST /api/questions
Generates additional clarifying questions (optional endpoint for future enhancements).

## Rate Limiting & Error Handling

### Rate Limits
- **Default Limit**: 10 requests per minute per client
- **Configurable**: Modify limits in `lib/gemini.ts`
- **Response**: 429 status code when limit exceeded

### Error Types
- **Validation Errors**: Invalid input data (400)
- **Rate Limiting**: Too many requests (429) 
- **API Errors**: Gemini API issues (401, 403, 500)
- **Network Errors**: Connection problems
- **Parsing Errors**: Invalid LLM responses

### Error Recovery
- Automatic retry suggestions for transient errors
- Clear error messages with actionable guidance
- Graceful degradation when services are unavailable

## Development

### Project Structure
```
├── app/
│   ├── api/                    # Next.js API routes
│   │   ├── analyze/           # Requirement analysis endpoint
│   │   ├── prompts/           # Prompt generation endpoint
│   │   └── questions/         # Additional questions endpoint
│   ├── globals.css           # Global styles and theme variables
│   ├── layout.tsx            # Root layout with providers
│   └── page.tsx              # Main application component
├── components/
│   ├── ui/                   # Shadcn/ui components
│   ├── analysis-panel.tsx    # Analysis results display
│   ├── header.tsx            # Application header
│   ├── history-panel.tsx     # Session history management
│   ├── prompts-panel.tsx     # Generated prompts display
│   └── requirement-input.tsx # Requirement input form
├── lib/
│   ├── analysis-service.ts   # LLM analysis logic
│   ├── env.ts               # Environment validation
│   ├── gemini.ts            # Gemini API service
│   ├── prompt-service.ts    # IDE prompt generation
│   └── utils.ts             # Utility functions
└── hooks/
    ├── use-mobile.ts        # Mobile detection
    └── use-toast.ts         # Toast notifications
```

### Key Components

#### GeminiService (`lib/gemini.ts`)
- Manages Gemini API connections and configurations
- Handles authentication, rate limiting, and error handling
- Provides structured response parsing

#### AnalysisService (`lib/analysis-service.ts`)
- Orchestrates requirement analysis workflow
- Generates clarifying questions and assumptions
- Refines analysis based on user feedback

#### PromptService (`lib/prompt-service.ts`)
- Creates IDE-specific prompts from analysis results
- Tailors content for different development environments
- Incorporates user answers and accepted assumptions

### Building for Production
```bash
npm run build
npm start
```

### Linting and Formatting
```bash
npm run lint
```

## Configuration

### Gemini API Settings
Modify generation parameters in `lib/gemini.ts`:
```typescript
generationConfig: {
  temperature: 0.7,    // Creativity (0.0-1.0)
  topP: 0.8,          // Nucleus sampling
  topK: 40,           // Top-k sampling
  maxOutputTokens: 8192, // Response length limit
}
```

### Rate Limiting
Adjust rate limits in `lib/gemini.ts`:
```typescript
export const rateLimiter = new RateLimiter(15, 60000) // 15 requests per minute
```

### UI Theme
Customize colors and design tokens in `app/globals.css` and `components.json`.

## Deployment

### Environment Variables
Ensure production environment includes:
```env
GEMINI_API_KEY=your_production_api_key
NEXT_PUBLIC_APP_URL=https://your-domain.com
```

### Deployment Platforms
- **Vercel**: Automatic deployment with Next.js optimization
- **Netlify**: Static site generation with API functions
- **Railway/Render**: Full-stack deployment with environment management

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Guidelines
- Use TypeScript for all new code
- Follow existing code style and patterns
- Add error handling for all API interactions
- Update documentation for new features
- Test with various requirement types and edge cases

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Support

For support, questions, or feature requests:
- Open an issue on GitHub
- Check existing documentation and FAQ
- Review error messages and logs for troubleshooting

---

**Built with ❤️ using Next.js, TypeScript, Tailwind CSS, and Google Gemini AI**



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}



================================================
FILE: next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig



================================================
FILE: package.json
================================================
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@google/generative-ai": "^0.24.1",
    "@hookform/resolvers": "^3.10.0",
    "openai": "^4.68.0",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "geist": "latest",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "latest",
    "react": "^18.3.1",
    "react-day-picker": "9.8.0",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.60.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.4",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.9",
    "zod": "3.25.67"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.9",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8.5",
    "tailwindcss": "^4.1.9",
    "tw-animate-css": "1.3.3",
    "typescript": "^5"
  }
}



================================================
FILE: pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false


================================================
FILE: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}

export default config



================================================
FILE: test-api-integration.js
================================================
// Simple test script to verify iteration API functionality
const testIterationAPI = async () => {
  const baseURL = 'http://localhost:3000';
  
  console.log('🧪 Testing Iteration API Integration...\n');
  
  // Test 1: Initial Analysis
  console.log('1️⃣ Testing Initial Analysis...');
  try {
    const initialResponse = await fetch(`${baseURL}/api/analyze`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        requirement: 'Create a user authentication system with login and registration',
        formData: {
          taskType: 'Feature Development',
          goal: 'Implement secure user authentication',
          components: ['auth', 'user', 'database'],
          inputs: 'User credentials, email',
          outputs: 'JWT tokens, user session'
        }
      })
    });
    
    if (initialResponse.ok) {
      const initialData = await initialResponse.json();
      console.log('✅ Initial analysis successful');
      console.log(`   Goals: ${initialData.data.goals.length}`);
      console.log(`   Questions: ${initialData.data.questions.length}`);
      console.log(`   Assumptions: ${initialData.data.assumptions.length}\n`);
      
      // Test 2: Create Iteration
      console.log('2️⃣ Testing Iteration Creation...');
      const iterationResponse = await fetch(`${baseURL}/api/analyze`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          requirement: 'Create a user authentication system with login and registration',
          formData: {
            taskType: 'Feature Development',
            goal: 'Implement secure user authentication',
            components: ['auth', 'user', 'database'],
            inputs: 'User credentials, email',
            outputs: 'JWT tokens, user session'
          },
          iterationData: {
            previousAnalysis: initialData.data,
            userEdits: {
              goals: [...initialData.data.goals, 'Add two-factor authentication'],
              constraints: [...initialData.data.constraints, 'Must comply with GDPR']
            },
            userFeedback: 'Please focus more on security aspects and add OAuth integration',
            iterationNumber: 2
          }
        })
      });
      
      if (iterationResponse.ok) {
        const iterationData = await iterationResponse.json();
        console.log('✅ Iteration creation successful');
        console.log(`   Goals: ${iterationData.data.goals.length}`);
        console.log(`   Questions: ${iterationData.data.questions.length}`);
        console.log(`   Assumptions: ${iterationData.data.assumptions.length}`);
        console.log('✅ All API tests passed!\n');
        
        return { success: true, initialData: initialData.data, iterationData: iterationData.data };
      } else {
        const error = await iterationResponse.json();
        console.log('❌ Iteration creation failed:', error);
        return { success: false, error };
      }
    } else {
      const error = await initialResponse.json();
      console.log('❌ Initial analysis failed:', error);
      return { success: false, error };
    }
  } catch (error) {
    console.log('❌ Test failed with error:', error.message);
    return { success: false, error: error.message };
  }
};

// Run the test if this script is executed directly
if (typeof window === 'undefined') {
  testIterationAPI().then(result => {
    if (result.success) {
      console.log('🎉 Integration test completed successfully!');
      process.exit(0);
    } else {
      console.log('💥 Integration test failed!');
      process.exit(1);
    }
  });
}

module.exports = { testIterationAPI };



================================================
FILE: test-iteration-workflow.md
================================================
# Iteration Workflow Test Plan

## Test Scenario: Complete End-to-End Iteration Workflow

### Prerequisites
- Development server running at http://localhost:3000
- Valid GEMINI_API_KEY in .env.local
- Browser access to the application

### Test Steps

#### 1. Initial Analysis Creation
1. Navigate to http://localhost:3000/app
2. Enter a test requirement: "Create a user authentication system with login, registration, and password reset functionality"
3. Fill in form data:
   - Task Type: "Feature Development"
   - Goal: "Implement secure user authentication"
   - Components: ["auth", "user", "database"]
   - Inputs: "User credentials, email"
   - Outputs: "JWT tokens, user session"
4. Click "Analyze Requirement"
5. Verify analysis is generated and displayed
6. Navigate to "Analyse" page

#### 2. Edit Analysis Content
1. Click on "Edit" tab
2. Modify some goals, constraints, or dependencies
3. Add new questions or assumptions
4. Save changes
5. Verify changes are reflected in the analysis

#### 3. Create First Iteration
1. Add user feedback: "Please focus more on security aspects and add two-factor authentication"
2. Click "Create New Iteration" button
3. Verify loading state is shown
4. Verify new iteration is created with improved analysis
5. Check that iteration history shows 2 iterations

#### 4. Navigate Between Iterations
1. Click on "History" tab
2. Select different iterations from the timeline
3. Verify analysis content changes appropriately
4. Test comparison functionality between iterations

#### 5. Create Additional Iterations
1. Switch to "Edit" tab
2. Make more modifications
3. Add different feedback: "Add OAuth integration and improve error handling"
4. Create another iteration
5. Verify iteration number increments correctly

#### 6. Test Persistence
1. Refresh the page
2. Verify all iterations are preserved
3. Verify current iteration state is maintained
4. Test localStorage data integrity

#### 7. Export Functionality
1. Click "Export History" button
2. Verify JSON file downloads correctly
3. Check exported data contains all iterations with metadata

#### 8. Mark Satisfaction
1. Mark current iteration as "satisfied"
2. Verify "Create New Iteration" button becomes disabled
3. Test that satisfied state persists across page refreshes

### Expected Results
- ✅ All UI components render correctly
- ✅ API calls succeed and return proper data
- ✅ Iterations show meaningful improvements
- ✅ State management works across all components
- ✅ localStorage persistence functions properly
- ✅ Error handling works for edge cases
- ✅ Performance is acceptable (< 5s for iterations)

### Error Scenarios to Test
1. Invalid API key - should show proper error message
2. Network failure during iteration - should handle gracefully
3. Malformed iteration data - should validate and reject
4. Rate limiting - should show appropriate message
5. Large requirement text - should handle without issues

### Performance Benchmarks
- Initial analysis: < 10 seconds
- Iteration creation: < 8 seconds
- UI state updates: < 1 second
- localStorage operations: < 100ms



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: app/globals.css
================================================
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.15 0 0);
  --card: oklch(0.99 0 0);
  --card-foreground: oklch(0.15 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.15 0 0);
  --primary: oklch(0.548 0.194 200.096);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.95 0 0);
  --secondary-foreground: oklch(0.15 0 0);
  --muted: oklch(0.96 0 0);
  --muted-foreground: oklch(0.45 0 0);
  --accent: oklch(0.708 0.222 162.028);
  --accent-foreground: oklch(1 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.85 0 0);
  --input: oklch(0.98 0 0);
  --ring: oklch(0.548 0.194 200.096);
  --chart-1: oklch(0.646 0.222 162.028);
  --chart-2: oklch(0.708 0.222 162.028);
  --chart-3: oklch(0.548 0.194 200.096);
  --chart-4: oklch(0.577 0.245 27.325);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.5rem;
  --sidebar: oklch(0.99 0 0);
  --sidebar-foreground: oklch(0.15 0 0);
  --sidebar-primary: oklch(1 0 0);
  --sidebar-primary-foreground: oklch(0.15 0 0);
  --sidebar-accent: oklch(0.708 0.222 162.028);
  --sidebar-accent-foreground: oklch(1 0 0);
  --sidebar-border: oklch(0.85 0 0);
  --sidebar-ring: oklch(0.548 0.194 200.096);
}

.dark {
  /* Updated dark theme colors for glassmorphism design */
  --background: oklch(0.12 0 0);
  --foreground: oklch(0.98 0 0);
  --card: oklch(0.15 0 0 / 0.8);
  --card-foreground: oklch(0.98 0 0);
  --popover: oklch(0.15 0 0 / 0.9);
  --popover-foreground: oklch(0.98 0 0);
  --primary: oklch(0.65 0.2 280);
  --primary-foreground: oklch(0.98 0 0);
  --secondary: oklch(0.45 0 0);
  --secondary-foreground: oklch(0.98 0 0);
  --muted: oklch(0.3 0 0);
  --muted-foreground: oklch(0.7 0 0);
  --accent: oklch(0.65 0.2 280);
  --accent-foreground: oklch(0.98 0 0);
  --destructive: oklch(0.6 0.25 25);
  --destructive-foreground: oklch(0.98 0 0);
  --border: oklch(0.25 0 0 / 0.3);
  --input: oklch(0.15 0 0 / 0.5);
  --ring: oklch(0.65 0.2 280 / 0.5);
  --chart-1: oklch(0.55 0.25 260);
  --chart-2: oklch(0.6 0.2 220);
  --chart-3: oklch(0.65 0.2 140);
  --chart-4: oklch(0.7 0.2 60);
  --chart-5: oklch(0.6 0.25 25);
  --sidebar: oklch(0.12 0 0);
  --sidebar-foreground: oklch(0.98 0 0);
  --sidebar-primary: oklch(0.65 0.2 280);
  --sidebar-primary-foreground: oklch(0.98 0 0);
  --sidebar-accent: oklch(0.45 0 0);
  --sidebar-accent-foreground: oklch(0.98 0 0);
  --sidebar-border: oklch(0.25 0 0 / 0.3);
  --sidebar-ring: oklch(0.65 0.2 280 / 0.5);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .glass {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .glass-dark {
    background: rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .gradient-bg {
    background: radial-gradient(ellipse at center, rgba(139, 92, 246, 0.15) 0%, transparent 70%);
  }
}



================================================
FILE: app/layout.tsx
================================================
import type React from "react"
import type { Metadata } from "next"
import { GeistSans } from "geist/font/sans"
import { GeistMono } from "geist/font/mono"
import { ThemeProvider } from "@/components/theme-provider"
import { Toaster } from "@/components/ui/toaster"
import "./globals.css"

export const metadata: Metadata = {
  title: "AI IDE Prompt Agent",
  description: "Transform requirements into structured IDE prompts",
  generator: "v0.app",
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <style>{`
html {
  font-family: ${GeistSans.style.fontFamily};
  --font-sans: ${GeistSans.variable};
  --font-mono: ${GeistMono.variable};
}
        `}</style>
      </head>
      <body>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  )
}



================================================
FILE: app/page.tsx
================================================
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowRight, Sparkles, Code, Zap, Users, Shield, Rocket, Moon, Sun } from "lucide-react"
import Link from "next/link"
import { useTheme } from "next-themes"

export interface RequirementFormData {
  taskType?: string
  goal?: string
  components?: string[]
  inputs?: string
  outputs?: string
  referenceFiles?: File[]
  referenceUrls?: string[]
  requirement?: string
  context?: string
}

export interface Question {
  id: string
  text: string
  priority: "critical" | "important" | "nice-to-have"
  answer?: string
}

export interface Assumption {
  id: string
  text: string
  confidence: number
  accepted: boolean
}

export interface Analysis {
  goals: string[]
  constraints: string[]
  dependencies: string[]
  edgeCases: string[]
  acceptanceCriteria: string[]
  questions: Question[]
  assumptions: Assumption[]
}

export interface GeneratedPrompts {
  cursor: string
  copilot: string
  warp: string
  windsurf: string
}

export interface EditedPrompts {
  cursor?: string
  copilot?: string
  warp?: string
  windsurf?: string
}

export interface Session {
  id: string
  timestamp: Date
  requirement: string
  formData?: RequirementFormData
  analysis?: Analysis
  prompts?: GeneratedPrompts
  editedPrompts?: EditedPrompts
}

export default function LandingPage() {
  const { theme, setTheme } = useTheme()

  return (
    <div className="min-h-screen bg-background dark:bg-gradient-to-br dark:from-background dark:via-background dark:to-purple-950/20">
      {/* Glassmorphism Navigation */}
      <nav className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 w-full max-w-4xl px-4">
        <div className="glass dark:glass-dark rounded-full px-6 py-3 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center">
              <Sparkles className="w-4 h-4 text-primary-foreground" />
            </div>
            <span className="font-bold text-lg">AI Prompt Architect</span>
          </div>
          <div className="flex items-center gap-4">
            <Link href="/app" className="text-sm hover:text-primary transition-colors">
              Features
            </Link>
            <Link href="/app" className="text-sm hover:text-primary transition-colors">
              Pricing
            </Link>
            <button
              onClick={() => setTheme(theme === "light" ? "dark" : "light")}
              className="p-2 rounded-full hover:bg-white/10 dark:hover:bg-black/10 transition-colors relative"
              aria-label="Toggle theme"
            >
              <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <Moon className="absolute top-2 left-2 h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            </button>
            <Link href="/app">
              <Button size="sm" className="rounded-full">
                Get Started
              </Button>
            </Link>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="relative min-h-screen flex items-center justify-center px-4 overflow-hidden">
        {/* Background Effects */}
        <div className="absolute inset-0 gradient-bg" />
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-primary/10 rounded-full blur-3xl" />
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-accent/10 rounded-full blur-3xl" />

        {/* Curved Light Element */}
        <div className="absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-primary/20 to-transparent rounded-t-[100%] transform scale-x-150" />

        <div className="relative z-10 text-center max-w-4xl mx-auto">
          <Badge variant="secondary" className="mb-6 glass dark:glass-dark border-0">
            <Sparkles className="w-3 h-3 mr-1" />
            Powered by Advanced AI
          </Badge>

          <h1 className="text-5xl md:text-7xl font-bold mb-6 text-balance">
            Transform Requirements into
            <span className="text-primary block">Perfect AI Prompts</span>
          </h1>

          <p className="text-xl md:text-2xl text-muted-foreground mb-8 text-pretty max-w-2xl mx-auto leading-relaxed">
            Generate structured, IDE-optimized prompts from your development requirements. Boost productivity with
            AI-powered analysis and multi-platform compatibility.
          </p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-12">
            <Link href="/app">
              <Button size="lg" className="rounded-full px-8 py-6 text-lg group">
                Start Building
                <ArrowRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform" />
              </Button>
            </Link>
            <Button
              variant="outline"
              size="lg"
              className="rounded-full px-8 py-6 text-lg glass dark:glass-dark border-0 bg-transparent"
            >
              Watch Demo
            </Button>
          </div>

          {/* Email Signup */}
          <div className="glass dark:glass-dark rounded-2xl p-6 max-w-md mx-auto">
            <div className="flex gap-2">
              <input
                type="email"
                placeholder="Enter your email"
                className="flex-1 bg-input border-0 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-primary/50 outline-none"
              />
              <Button className="rounded-lg px-6">Join Waitlist</Button>
            </div>
            <p className="text-xs text-muted-foreground mt-2">We'll notify you when we launch.</p>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-24 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold mb-6">
              Everything you need to
              <span className="text-primary block">supercharge development</span>
            </h2>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto text-pretty">
              From requirement analysis to IDE-specific prompts, we've got every step of your workflow covered.
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[
              {
                icon: <Code className="w-8 h-8" />,
                title: "Multi-Step Analysis",
                description:
                  "Break down complex requirements into structured, actionable components with AI-powered analysis.",
              },
              {
                icon: <Zap className="w-8 h-8" />,
                title: "IDE Optimization",
                description:
                  "Generate prompts tailored for Cursor, Copilot, Warp, and Windsurf with platform-specific formatting.",
              },
              {
                icon: <Users className="w-8 h-8" />,
                title: "Team Collaboration",
                description:
                  "Share and iterate on prompts with your team. Keep everyone aligned on project requirements.",
              },
              {
                icon: <Shield className="w-8 h-8" />,
                title: "Smart Validation",
                description: "Automatic validation of requirements with edge case detection and assumption tracking.",
              },
              {
                icon: <Rocket className="w-8 h-8" />,
                title: "Instant Generation",
                description: "Transform requirements into production-ready prompts in seconds, not hours.",
              },
              {
                icon: <Sparkles className="w-8 h-8" />,
                title: "AI-Powered Insights",
                description: "Get intelligent suggestions for improving your requirements and development approach.",
              },
            ].map((feature, index) => (
              <Card
                key={index}
                className="glass dark:glass-dark border-0 hover:scale-105 transition-transform duration-300"
              >
                <CardContent className="p-6">
                  <div className="text-primary mb-4">{feature.icon}</div>
                  <h3 className="text-xl font-semibold mb-3">{feature.title}</h3>
                  <p className="text-muted-foreground leading-relaxed">{feature.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-24 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <div className="glass dark:glass-dark rounded-3xl p-12">
            <h2 className="text-4xl md:text-5xl font-bold mb-6">
              Ready to transform your
              <span className="text-primary block">development workflow?</span>
            </h2>
            <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
              Join thousands of developers who are already using AI Prompt Architect to streamline their coding process.
            </p>
            <Link href="/app">
              <Button size="lg" className="rounded-full px-12 py-6 text-lg">
                Get Started Free
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-12 px-4 border-t border-border/50">
        <div className="max-w-6xl mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-center gap-6">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center">
                <Sparkles className="w-4 h-4 text-primary-foreground" />
              </div>
              <span className="font-bold text-lg">AI Prompt Architect</span>
            </div>
            <div className="flex gap-6 text-sm text-muted-foreground">
              <Link href="#" className="hover:text-primary transition-colors">
                Privacy
              </Link>
              <Link href="#" className="hover:text-primary transition-colors">
                Terms
              </Link>
              <Link href="#" className="hover:text-primary transition-colors">
                Support
              </Link>
            </div>
          </div>
          <div className="text-center text-sm text-muted-foreground mt-8">
            2024 AI Prompt Architect. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  )
}



================================================
FILE: app/analyse/page.tsx
================================================
"use client"

import { useEffect, useState, useRef } from "react"
import { useRouter } from "next/navigation"
import { AnalysisPanel } from "@/components/analysis-panel"
import { EditSection } from "@/components/edit-section"
import { IterationDisplay, type AnalysisIteration } from "@/components/iteration-display"
import { TopNavigation } from "@/components/top-navigation"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { cn } from "@/lib/utils"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/hooks/use-toast"
import { useIterations } from "@/hooks/use-iterations"
import { compareAnalyses, getIterationSummary, calculateIterationMetrics } from "@/lib/iteration-utils"
import { Loader2, RefreshCw, CheckCircle2, TrendingUp, Download, AlertCircle } from "lucide-react"
import { AIProvider, AI_PROVIDERS } from "@/lib/ai-types"
import type { Analysis, RequirementFormData } from "@/app/page"

export default function AnalysePage() {
  const router = useRouter()
  const { toast } = useToast()
  const syncInProgress = useRef(false)
  
  // Original state
  const [analysis, setAnalysis] = useState<Analysis | null>(null)
  const [requirement, setRequirement] = useState("")
  const [formData, setFormData] = useState<RequirementFormData>({})
  const [aiProvider, setAIProvider] = useState<AIProvider>(AI_PROVIDERS.GEMINI)
  const [isLoading, setIsLoading] = useState(true)
  const [isEditing, setIsEditing] = useState(false)
  const [isGeneratingPrompts, setIsGeneratingPrompts] = useState(false)
  const [activeTab, setActiveTab] = useState("analysis")
  const [isDataLoaded, setIsDataLoaded] = useState(false)
  
  // Use the iterations hook for enhanced state management
  const {
    iterations,
    currentIteration,
    isIterating,
    userFeedback,
    setUserFeedback,
    createIteration,
    selectIteration,
    markSatisfied,
    getCurrentAnalysis,
    hasUnsavedChanges,
    saveCurrentIteration,
    canIterate,
    getIterationStats
  } = useIterations({ initialAnalysis: analysis || undefined, requirement, formData, aiProvider })

  useEffect(() => {
    // Load data from localStorage
    const savedAnalysis = localStorage.getItem("currentAnalysis")
    const savedRequirement = localStorage.getItem("currentRequirement")
    const savedFormData = localStorage.getItem("currentFormData")
    const savedAIProvider = localStorage.getItem("currentAIProvider")

    if (savedAnalysis) {
      setAnalysis(JSON.parse(savedAnalysis))
    }
    if (savedRequirement) {
      setRequirement(savedRequirement)
    }
    if (savedFormData) {
      setFormData(JSON.parse(savedFormData))
    }
    if (savedAIProvider && (savedAIProvider === AI_PROVIDERS.GEMINI || savedAIProvider === AI_PROVIDERS.OPENAI)) {
      setAIProvider(savedAIProvider as AIProvider)
    }

    setIsLoading(false)
    setIsDataLoaded(true)

    // If no analysis data, redirect to home
    if (!savedAnalysis) {
      router.push("/")
    }
  }, [router])

  // Sync analysis with current iteration - Fixed race condition
  useEffect(() => {
    if (!isDataLoaded || syncInProgress.current) return
    
    const currentAnalysis = getCurrentAnalysis()
    if (currentAnalysis) {
      const currentStr = JSON.stringify(currentAnalysis)
      const analysisStr = JSON.stringify(analysis)
      
      if (currentStr !== analysisStr) {
        setAnalysis(currentAnalysis)
      }
    }
  }, [currentIteration, isDataLoaded])

  const handleAnalysisUpdate = (updatedAnalysis: Analysis) => {
    setAnalysis(updatedAnalysis)
    saveCurrentIteration(updatedAnalysis)
  }

  const handleEditSave = (editedAnalysis: Partial<Analysis>) => {
    if (!analysis) return
    
    // Handle both partial and complete analysis updates
    const updatedAnalysis: Analysis = {
      goals: editedAnalysis.goals || analysis.goals,
      constraints: editedAnalysis.constraints || analysis.constraints,
      dependencies: editedAnalysis.dependencies || analysis.dependencies,
      edgeCases: editedAnalysis.edgeCases || analysis.edgeCases,
      acceptanceCriteria: editedAnalysis.acceptanceCriteria || analysis.acceptanceCriteria,
      questions: editedAnalysis.questions || analysis.questions,
      assumptions: editedAnalysis.assumptions || analysis.assumptions,
    }
    
    handleAnalysisUpdate(updatedAnalysis)
    // Persist user edits on the current iteration so the next iteration incorporates them
    try {
      const savedIterations = localStorage.getItem("currentIterations")
      if (savedIterations) {
        const parsed = JSON.parse(savedIterations)
        if (parsed?.[currentIteration]) {
          parsed[currentIteration].userEdits = editedAnalysis
          localStorage.setItem("currentIterations", JSON.stringify(parsed))
        }
      }
    } catch {}
    
    toast({
      title: "Analysis Updated",
      description: "Your changes have been saved successfully."
    })
  }

  const handleIterate = async () => {
    const success = await createIteration()
    
    if (success) {
      const stats = getIterationStats()
      toast({
        title: "Analysis Iterated",
        description: `Created iteration ${stats.current} with refined analysis.`
      })
      setActiveTab("analysis") // Switch back to analysis tab
    } else {
      toast({
        title: "Iteration Failed",
        description: "Failed to create new iteration. Please try again.",
        variant: "destructive"
      })
    }
  }

  const handleSelectIteration = (index: number) => {
    selectIteration(index)
    setActiveTab("analysis") // Switch to analysis tab when selecting iteration
  }

  const handleMarkSatisfied = () => {
    markSatisfied()
    toast({
      title: "Analysis Approved",
      description: "You've marked this analysis as satisfactory."
    })
  }

  const handleExportHistory = () => {
    const exportData = {
      exportedAt: new Date().toISOString(),
      requirement,
      formData,
      iterations: iterations.map(iter => ({
        iterationNumber: iter.iterationNumber,
        timestamp: iter.timestamp,
        isUserSatisfied: iter.isUserSatisfied,
        userFeedback: iter.userFeedback,
        summary: getIterationSummary(iter),
        analysis: iter.analysis
      }))
    }
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `analysis-iterations-${new Date().toISOString().split('T')[0]}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    
    toast({
      title: "Export Complete",
      description: "Iteration history has been exported successfully."
    })
  }

  const handleCompareIterations = (iter1: number, iter2: number) => {
    if (iter1 < iterations.length && iter2 < iterations.length) {
      const comparison = compareAnalyses(iterations[iter1].analysis, iterations[iter2].analysis)
      console.log('Iteration comparison:', comparison)
      // You could show this in a modal or dedicated comparison view
      toast({
        title: "Comparison Ready",
        description: `Comparing iteration ${iter1 + 1} with iteration ${iter2 + 1}`
      })
    }
  }

  const handleGeneratePrompts = async () => {
    if (!analysis) return

    setIsGeneratingPrompts(true)
    
    try {
      const response = await fetch("/api/prompts", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          requirement,
          formData,
          analysis,
          answeredQuestions: analysis.questions.filter(q => q.answer?.trim()),
          acceptedAssumptions: analysis.assumptions.filter(a => a.accepted),
          provider: aiProvider,
        }),
      })

      if (response.ok) {
        const { data: prompts } = await response.json()
        localStorage.setItem("currentPrompts", JSON.stringify(prompts))
        
        toast({
          title: "Prompts Generated",
          description: "IDE-specific prompts have been generated successfully!"
        })
        
        router.push("/prompts")
      } else {
        throw new Error("Failed to generate prompts")
      }
    } catch (error) {
      console.error("Failed to generate prompts:", error)
      toast({
        title: "Generation Failed",
        description: "Failed to generate IDE prompts. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsGeneratingPrompts(false)
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background">
        <div className="flex items-center justify-center min-h-[calc(100vh-80px)]">
          <div className="text-center">Loading analysis...</div>
        </div>
      </div>
    )
  }

  if (!analysis) {
    return (
      <div className="min-h-screen bg-background">
        <div className="flex items-center justify-center min-h-[calc(100vh-80px)]">
          <div className="text-center">
            <p className="text-muted-foreground mb-4">No analysis data found</p>
            <button 
              onClick={() => router.push("/")}
              className="px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90"
            >
              Start New Analysis
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <TopNavigation currentStep="analyse" />
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">Analysis Results</h1>
          <p className="text-muted-foreground mb-4">
            Review and refine your requirement analysis
          </p>
          <div className="inline-flex items-center gap-2 px-3 py-1 bg-muted rounded-full text-sm">
            <span className="text-muted-foreground">Powered by</span>
            <Badge variant="outline" className={cn(
              aiProvider === AI_PROVIDERS.GEMINI 
                ? "bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-950/20 dark:text-blue-300 dark:border-blue-800"
                : "bg-green-50 text-green-700 border-green-200 dark:bg-green-950/20 dark:text-green-300 dark:border-green-800"
            )}>
              {aiProvider === AI_PROVIDERS.GEMINI ? "🤖 Google Gemini" : "🧠 OpenAI GPT-4"}
            </Badge>
          </div>
        </div>

        {/* Iteration Stats */}
        {iterations.length > 0 && (
          <div className="bg-card rounded-lg border p-4 mb-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="text-sm">
                  <span className="font-medium">Iteration:</span>
                  <Badge variant="outline" className="ml-2">
                    {getIterationStats().current} of {getIterationStats().total}
                  </Badge>
                </div>
                <div className="text-sm">
                  <span className="font-medium">Satisfied:</span>
                  <Badge variant={getIterationStats().satisfied > 0 ? "default" : "secondary"} className="ml-2">
                    {getIterationStats().satisfied}
                  </Badge>
                </div>
                {hasUnsavedChanges && (
                  <Alert className="py-2 px-3 w-auto">
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription className="text-sm ml-2">
                      You have unsaved changes
                    </AlertDescription>
                  </Alert>
                )}
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleExportHistory}
                  disabled={iterations.length === 0}
                >
                  <Download className="h-4 w-4 mr-1" />
                  Export
                </Button>
              </div>
            </div>
          </div>
        )}

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="analysis">Analysis</TabsTrigger>
            <TabsTrigger value="edit" className="relative">
              Edit
              {hasUnsavedChanges && (
                <div className="absolute -top-1 -right-1 w-2 h-2 bg-yellow-500 rounded-full" />
              )}
            </TabsTrigger>
            <TabsTrigger value="history" className="relative">
              History
              {iterations.length > 1 && (
                <Badge variant="secondary" className="ml-2 text-xs">
                  {iterations.length}
                </Badge>
              )}
            </TabsTrigger>
          </TabsList>

          <TabsContent value="analysis" className="space-y-6">
            <div className="bg-card rounded-lg border shadow-sm">
              <AnalysisPanel
                analysis={analysis}
                onUpdate={handleAnalysisUpdate}
                onGeneratePrompts={handleGeneratePrompts}
                isGenerating={isGeneratingPrompts}
              />
            </div>
            
            {/* Enhanced Iteration Controls */}
            <div className="bg-card rounded-lg border shadow-sm p-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium flex items-center gap-2">
                      Iteration Controls
                      <TrendingUp className="h-4 w-4 text-muted-foreground" />
                    </h3>
                    <p className="text-sm text-muted-foreground">
                      {iterations[currentIteration] ? getIterationSummary(iterations[currentIteration]) : 'No iteration data'}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    {iterations[currentIteration]?.isUserSatisfied ? (
                      <Badge variant="default" className="bg-green-600">
                        <CheckCircle2 className="h-3 w-3 mr-1" />
                        Satisfied
                      </Badge>
                    ) : (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleMarkSatisfied}
                        disabled={!canIterate()}
                      >
                        <CheckCircle2 className="h-4 w-4 mr-1" />
                        Mark as Satisfied
                      </Button>
                    )}
                  </div>
                </div>
                
                {/* Iteration Metrics */}
                {iterations.length > 1 && (
                  <div className="bg-muted/50 p-3 rounded-md">
                    <div className="text-xs text-muted-foreground mb-2">Iteration Metrics:</div>
                    <div className="grid grid-cols-3 gap-4 text-sm">
                      <div>
                        <div className="font-medium">{calculateIterationMetrics(iterations).totalIterations}</div>
                        <div className="text-xs text-muted-foreground">Total</div>
                      </div>
                      <div>
                        <div className="font-medium">{calculateIterationMetrics(iterations).satisfiedIterations}</div>
                        <div className="text-xs text-muted-foreground">Satisfied</div>
                      </div>
                      <div>
                        <div className="font-medium">{calculateIterationMetrics(iterations).averageItemsPerIteration}</div>
                        <div className="text-xs text-muted-foreground">Avg Items</div>
                      </div>
                    </div>
                  </div>
                )}
                
                <div className="space-y-2">
                  <label className="text-sm font-medium">Feedback for next iteration (optional):</label>
                  <textarea
                    value={userFeedback}
                    onChange={(e) => setUserFeedback(e.target.value)}
                    placeholder="Describe what you'd like to improve or refine..."
                    className="w-full p-2 border rounded-md text-sm min-h-[80px] resize-none"
                    disabled={!canIterate()}
                  />
                </div>
                
                <Button
                  onClick={handleIterate}
                  disabled={!canIterate()}
                  className="w-full"
                >
                  {isIterating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creating Iteration...
                    </>
                  ) : (
                    <>
                      <RefreshCw className="mr-2 h-4 w-4" />
                      Create New Iteration
                    </>
                  )}
                </Button>
                
                {!canIterate() && iterations[currentIteration]?.isUserSatisfied && (
                  <p className="text-sm text-muted-foreground text-center">
                    This iteration is marked as satisfied. No further iterations needed.
                  </p>
                )}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="edit">
            <EditSection
              analysis={analysis}
              onSave={handleEditSave}
              onCancel={() => setIsEditing(false)}
              isEditing={isEditing}
              onToggleEdit={() => setIsEditing(!isEditing)}
            />
          </TabsContent>

          <TabsContent value="history">
            <IterationDisplay
              iterations={iterations}
              currentIteration={currentIteration}
              onSelectIteration={handleSelectIteration}
              onCompareIterations={handleCompareIterations}
            />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}



================================================
FILE: app/api/analyze/route.ts
================================================
import { NextRequest, NextResponse } from "next/server"
import { z } from "zod"
import { analysisService } from "@/lib/analysis-service"
import { rateLimiter, GeminiError } from "@/lib/gemini"
import { openaiRateLimiter, OpenAIError } from "@/lib/openai"
import { AIError } from "@/lib/ai-service"
import type { Analysis } from "@/app/page"

const requirementFormDataSchema = z.object({
  taskType: z.string().optional(),
  goal: z.string().optional(),
  components: z.array(z.string()).optional(),
  inputs: z.string().optional(),
  outputs: z.string().optional(),
  referenceFiles: z.any().optional(), // Files will be handled separately
  referenceUrls: z.array(z.string().url()).optional(),
  requirement: z.string().optional(),
  context: z.string().optional(),
})

// Schema for iteration data
const iterationDataSchema = z.object({
  previousAnalysis: z.object({
    goals: z.array(z.string()),
    constraints: z.array(z.string()),
    dependencies: z.array(z.string()),
    edgeCases: z.array(z.string()),
    acceptanceCriteria: z.array(z.string()),
    questions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      priority: z.enum(["critical", "important", "nice-to-have"]),
      answer: z.string().optional(),
    })),
    assumptions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      confidence: z.number().min(0).max(1),
      accepted: z.boolean(),
    })),
  }),
  userEdits: z.object({
    goals: z.array(z.string()).optional(),
    constraints: z.array(z.string()).optional(),
    dependencies: z.array(z.string()).optional(),
    edgeCases: z.array(z.string()).optional(),
    acceptanceCriteria: z.array(z.string()).optional(),
    questions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      priority: z.enum(["critical", "important", "nice-to-have"]),
      answer: z.string().optional(),
    })).optional(),
    assumptions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      confidence: z.number().min(0).max(1),
      accepted: z.boolean(),
    })).optional(),
  }).optional(),
  userFeedback: z.string().optional(),
  iterationNumber: z.number().min(1),
}).optional()

const analyzeRequestSchema = z.object({
  requirement: z
    .string()
    .max(200000, "Requirement must be less than 200k characters")
    .optional(),
  context: z
    .string()
    .max(200000, "Context must be less than 200k characters")
    .optional()
    .or(z.literal("").optional()),
  formData: requirementFormDataSchema.optional(),
  iterationData: iterationDataSchema,
  provider: z.enum(["gemini", "openai"]).optional().default("gemini"),
}).refine(
  (data) => {
    // For iterations, we need previous analysis
    if (data.iterationData) {
      return true // Iteration requests are always valid if they have iteration data
    }
    
    // For initial analysis, at least one of these must have content
    const hasLegacyData = (data.requirement && data.requirement.trim().length >= 10)
    const hasStructuredData = data.formData && (
      data.formData.goal || 
      data.formData.taskType || 
      data.formData.inputs || 
      data.formData.outputs
    )
    return hasLegacyData || hasStructuredData
  },
  {
    message: "Either requirement text (min 10 chars) or structured form data must be provided for initial analysis"
  }
)

export async function POST(request: NextRequest) {
  try {
    // Parse request first so we can determine provider (defaults to gemini)
    const body = await request.json()
    const validatedData = analyzeRequestSchema.parse(body)

    // Rate limiting check based on provider
    const isGemini = validatedData.provider === "gemini"
    const rateLimiterToUse = isGemini ? rateLimiter : openaiRateLimiter
    
    if (!rateLimiterToUse.canMakeRequest()) {
      return NextResponse.json(
        { error: "Too many requests. Please wait before trying again." },
        { status: 429 }
      )
    }

    rateLimiterToUse.recordRequest()

    let analysis: Analysis
    
    // Check if this is an iteration request
    if (validatedData.iterationData) {
      analysis = await analysisService.createIteration(
        validatedData.requirement || "",
        validatedData.iterationData.previousAnalysis,
        validatedData.iterationData.iterationNumber,
        validatedData.context || "",
        validatedData.formData,
        validatedData.iterationData.userEdits,
        validatedData.iterationData.userFeedback
      )
    } else {
      // Initial analysis
      analysis = await analysisService.analyzeRequirement(
        validatedData.requirement || "", 
        validatedData.context || "",
        validatedData.formData,
        validatedData.provider
      )
    }

    return NextResponse.json({ 
      success: true,
      data: analysis 
    })

  } catch (error) {
    console.error("Analysis API error:", error)

    if (error instanceof z.ZodError) {
      // Enhanced validation error handling for iterations
      const isIterationError = error.errors.some(err => 
        err.path.includes('iterationData') || err.path.includes('previousAnalysis')
      )
      
      return NextResponse.json(
        { 
          error: isIterationError 
            ? "Invalid iteration data provided" 
            : "Invalid request data", 
          details: error.errors,
          type: isIterationError ? 'iteration_validation_error' : 'validation_error'
        },
        { status: 400 }
      )
    }

    if (error instanceof GeminiError || error instanceof OpenAIError || error instanceof AIError) {
      const statusCode = error.code === "RATE_LIMIT" ? 429 : 
                        error.code === "UNAUTHORIZED" ? 401 :
                        error.code === "FORBIDDEN" ? 403 : 500

      // Enhanced error messaging for iterations
      const isIterationContext = error.message.includes('iteration') || error.message.includes('refinement')
      const errorMessage = isIterationContext 
        ? `Failed to create iteration: ${error.message}`
        : error.message

      return NextResponse.json(
        { 
          error: errorMessage, 
          code: error.code,
          type: isIterationContext ? 'iteration_ai_error' : 'ai_error'
        },
        { status: statusCode }
      )
    }

    // Check if this is an iteration-specific error
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    const isIterationError = errorMessage.includes('iteration') || errorMessage.includes('createIteration')
    
    return NextResponse.json(
      { 
        error: isIterationError 
          ? "Failed to create iteration. Please try again." 
          : "Failed to analyze requirement. Please try again.",
        type: isIterationError ? 'iteration_error' : 'analysis_error'
      },
      { status: 500 }
    )
  }
}

export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  })
}



================================================
FILE: app/api/prompts/route.ts
================================================
import { NextRequest, NextResponse } from "next/server"
import { z } from "zod"
import { promptService } from "@/lib/prompt-service"
import { rateLimiter, GeminiError } from "@/lib/gemini"
import { openaiRateLimiter, OpenAIError } from "@/lib/openai"
import { AIError } from "@/lib/ai-service"

const requirementFormDataSchema = z.object({
  taskType: z.string().optional(),
  goal: z.string().optional(),
  components: z.array(z.string()).optional(),
  inputs: z.string().optional(),
  outputs: z.string().optional(),
  referenceFiles: z.any().optional(),
  referenceUrls: z.array(z.string()).optional(),
  requirement: z.string().optional(),
  context: z.string().optional(),
})

const promptRequestSchema = z.object({
  requirement: z.string().optional(),
  formData: requirementFormDataSchema.optional(),
  analysis: z.object({
    goals: z.array(z.string()),
    constraints: z.array(z.string()),
    dependencies: z.array(z.string()),
    edgeCases: z.array(z.string()),
    acceptanceCriteria: z.array(z.string()),
    questions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      priority: z.enum(["critical", "important", "nice-to-have"]),
      answer: z.string().optional(),
    })),
    assumptions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      confidence: z.number(),
      accepted: z.boolean(),
    })),
  }),
  answeredQuestions: z.array(z.object({
    id: z.string(),
    text: z.string(),
    priority: z.enum(["critical", "important", "nice-to-have"]),
    answer: z.string(),
  })),
  acceptedAssumptions: z.array(z.object({
    id: z.string(),
    text: z.string(),
    confidence: z.number(),
    accepted: z.boolean(),
  })),
  provider: z.enum(["gemini", "openai"]).optional().default("gemini"),
}).refine(
  (data) => {
    // At least one of these must have content
    const hasLegacyData = (data.requirement && data.requirement.trim().length >= 10)
    const hasStructuredData = data.formData && (
      data.formData.goal || 
      data.formData.taskType || 
      data.formData.inputs || 
      data.formData.outputs
    )
    return hasLegacyData || hasStructuredData
  },
  {
    message: "Either requirement text (min 10 chars) or structured form data must be provided"
  }
)

export async function POST(request: NextRequest) {
  try {
    // Parse request first so we know the provider (defaults to gemini)
    const body = await request.json()
    const validatedData = promptRequestSchema.parse(body)

    // Rate limiting check based on provider
    const isGemini = validatedData.provider === "gemini"
    const rateLimiterToUse = isGemini ? rateLimiter : openaiRateLimiter
    
    if (!rateLimiterToUse.canMakeRequest()) {
      return NextResponse.json(
        { error: "Too many requests. Please wait before trying again." },
        { status: 429 }
      )
    }

    rateLimiterToUse.recordRequest()

    const prompts = await promptService.generateIDEPrompts({
      requirement: validatedData.requirement || "",
      formData: validatedData.formData,
      analysis: validatedData.analysis,
      answeredQuestions: validatedData.answeredQuestions,
      acceptedAssumptions: validatedData.acceptedAssumptions,
      provider: validatedData.provider,
    })

    return NextResponse.json({ 
      success: true,
      data: prompts 
    })

  } catch (error) {
    console.error("Prompts API error:", error)

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Invalid request data", details: error.errors },
        { status: 400 }
      )
    }

    if (error instanceof GeminiError || error instanceof OpenAIError || error instanceof AIError) {
      const statusCode = error.code === "RATE_LIMIT" ? 429 : 
                        error.code === "UNAUTHORIZED" ? 401 :
                        error.code === "FORBIDDEN" ? 403 : 500

      return NextResponse.json(
        { error: error.message, code: error.code },
        { status: statusCode }
      )
    }

    return NextResponse.json(
      { error: "Failed to generate prompts. Please try again." },
      { status: 500 }
    )
  }
}

export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  })
}



================================================
FILE: app/api/prompts/improve/route.ts
================================================
import { NextRequest, NextResponse } from "next/server"
import { z } from "zod"
import { promptService } from "@/lib/prompt-service"
import { rateLimiter, GeminiError } from "@/lib/gemini"

const improvePromptSchema = z.object({
  originalPrompt: z.string().min(10, "Original prompt must be at least 10 characters"),
  ideType: z.enum(["cursor", "copilot", "warp", "windsurf"]),
  improvementInstructions: z.string().min(5, "Improvement instructions must be at least 5 characters"),
  requirement: z.string().optional(),
  analysis: z.object({
    goals: z.array(z.string()),
    constraints: z.array(z.string()),
    dependencies: z.array(z.string()),
    edgeCases: z.array(z.string()),
    acceptanceCriteria: z.array(z.string()),
    questions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      priority: z.enum(["critical", "important", "nice-to-have"]),
      answer: z.string().optional(),
    })),
    assumptions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      confidence: z.number(),
      accepted: z.boolean(),
    })),
  }).optional(),
})

export async function POST(request: NextRequest) {
  try {
    // Rate limiting check
    if (!rateLimiter.canMakeRequest()) {
      return NextResponse.json(
        { error: "Too many requests. Please wait before trying again." },
        { status: 429 }
      )
    }

    rateLimiter.recordRequest()

    const body = await request.json()
    const validatedData = improvePromptSchema.parse(body)

    const improvedPrompt = await promptService.improvePrompt({
      originalPrompt: validatedData.originalPrompt,
      ideType: validatedData.ideType,
      improvementInstructions: validatedData.improvementInstructions,
      requirement: validatedData.requirement,
      analysis: validatedData.analysis,
    })

    return NextResponse.json({ 
      success: true,
      data: {
        improvedPrompt,
        originalPrompt: validatedData.originalPrompt,
        ideType: validatedData.ideType,
        improvementInstructions: validatedData.improvementInstructions,
      }
    })

  } catch (error) {
    console.error("Improve prompts API error:", error)

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Invalid request data", details: error.errors },
        { status: 400 }
      )
    }

    if (error instanceof GeminiError) {
      const statusCode = error.code === "RATE_LIMIT" ? 429 : 
                        error.code === "UNAUTHORIZED" ? 401 :
                        error.code === "FORBIDDEN" ? 403 : 500

      return NextResponse.json(
        { error: error.message, code: error.code },
        { status: statusCode }
      )
    }

    return NextResponse.json(
      { error: "Failed to improve prompt. Please try again." },
      { status: 500 }
    )
  }
}

export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  })
}



================================================
FILE: app/api/questions/route.ts
================================================
import { NextRequest, NextResponse } from "next/server"
import { z } from "zod"
import { analysisService } from "@/lib/analysis-service"
import { rateLimiter, GeminiError } from "@/lib/gemini"
import type { Analysis, Question } from "@/app/page"

const questionRequestSchema = z.object({
  requirement: z.string().min(10, "Requirement must be at least 10 characters"),
  currentAnalysis: z.object({
    goals: z.array(z.string()),
    constraints: z.array(z.string()),
    dependencies: z.array(z.string()),
    edgeCases: z.array(z.string()),
    acceptanceCriteria: z.array(z.string()),
    questions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      priority: z.enum(["critical", "important", "nice-to-have"]),
      answer: z.string().optional(),
    })),
    assumptions: z.array(z.object({
      id: z.string(),
      text: z.string(),
      confidence: z.number(),
      accepted: z.boolean(),
    })),
  }),
  answeredQuestions: z.array(z.object({
    id: z.string(),
    text: z.string(),
    priority: z.enum(["critical", "important", "nice-to-have"]),
    answer: z.string(),
  })),
})

export async function POST(request: NextRequest) {
  try {
    // Rate limiting check
    if (!rateLimiter.canMakeRequest()) {
      return NextResponse.json(
        { error: "Too many requests. Please wait before trying again." },
        { status: 429 }
      )
    }

    rateLimiter.recordRequest()

    const body = await request.json()
    const validatedData = questionRequestSchema.parse(body)

    const additionalQuestions = await analysisService.generateAdditionalQuestions(
      validatedData.requirement,
      validatedData.currentAnalysis,
      validatedData.answeredQuestions
    )

    return NextResponse.json({ 
      success: true,
      data: { questions: additionalQuestions }
    })

  } catch (error) {
    console.error("Questions API error:", error)

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Invalid request data", details: error.errors },
        { status: 400 }
      )
    }

    if (error instanceof GeminiError) {
      const statusCode = error.code === "RATE_LIMIT" ? 429 : 
                        error.code === "UNAUTHORIZED" ? 401 :
                        error.code === "FORBIDDEN" ? 403 : 500

      return NextResponse.json(
        { error: error.message, code: error.code },
        { status: statusCode }
      )
    }

    return NextResponse.json(
      { error: "Failed to generate additional questions. Please try again." },
      { status: 500 }
    )
  }
}

export async function OPTIONS(request: NextRequest) {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  })
}



================================================
FILE: app/app/page.tsx
================================================
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { MultiStepForm } from "@/components/multi-step-form"
import { TopNavigation } from "@/components/top-navigation"
import { AIProvider, AI_PROVIDERS } from "@/lib/ai-types"
import type { RequirementFormData } from "@/app/page"

export default function AppPage() {
  const router = useRouter()
  const [formData, setFormData] = useState<RequirementFormData>({})
  const [aiProvider, setAIProvider] = useState<AIProvider>(AI_PROVIDERS.GEMINI)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [isMounted, setIsMounted] = useState(false)

  useEffect(() => {
    setIsMounted(true)
    // Load saved form data and AI provider from localStorage
    const savedFormData = localStorage.getItem("currentFormData")
    const savedAIProvider = localStorage.getItem("currentAIProvider")
    
    if (savedFormData) {
      try {
        setFormData(JSON.parse(savedFormData))
      } catch (error) {
        console.error("Failed to parse saved form data:", error)
      }
    }
    
    if (savedAIProvider && (savedAIProvider === AI_PROVIDERS.GEMINI || savedAIProvider === AI_PROVIDERS.OPENAI)) {
      setAIProvider(savedAIProvider as AIProvider)
    }
  }, [])

  // Save form data and AI provider to localStorage whenever they change
  useEffect(() => {
    if (isMounted) {
      localStorage.setItem("currentFormData", JSON.stringify(formData))
    }
  }, [formData, isMounted])

  useEffect(() => {
    if (isMounted) {
      localStorage.setItem("currentAIProvider", aiProvider)
    }
  }, [aiProvider, isMounted])

  const handleAnalyze = async () => {
    setIsAnalyzing(true)

    try {
      // Build requirement text from form data if needed
      let requirementText = ""
      if (formData.goal) {
        const parts: string[] = []
        if (formData.taskType) parts.push(`Task Type: ${formData.taskType}`)
        if (formData.goal) parts.push(`Goal: ${formData.goal}`)
        if (formData.components && formData.components.length > 0) {
          parts.push(`Components/Files Affected: ${formData.components.join(', ')}`)
        }
        if (formData.inputs) parts.push(`Expected Inputs: ${formData.inputs}`)
        if (formData.outputs) parts.push(`Expected Outputs: ${formData.outputs}`)
        if (formData.referenceUrls && formData.referenceUrls.length > 0) {
          parts.push(`Reference URLs: ${formData.referenceUrls.join(', ')}`)
        }
        if (formData.referenceFiles && formData.referenceFiles.length > 0) {
          const fileNames = formData.referenceFiles.map((f: File) => f.name).join(', ')
          parts.push(`Reference Files: ${fileNames}`)
        }
        requirementText = parts.join('\n')
      }

      const response = await fetch("/api/analyze", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          requirement: requirementText,
          context: "",
          formData,
          provider: aiProvider,
        }),
      })

      if (response.ok) {
        const { data: analysis } = await response.json()
        
        // Save analysis and requirement data to localStorage
        localStorage.setItem("currentAnalysis", JSON.stringify(analysis))
        localStorage.setItem("currentRequirement", requirementText)
        
        // Navigate to analysis page
        router.push("/analyse")
      } else {
        const error = await response.json()
        console.error("Analysis failed:", error)
        alert("Analysis failed. Please try again.")
      }
    } catch (error) {
      console.error("Analysis error:", error)
      alert("Analysis failed. Please try again.")
    } finally {
      setIsAnalyzing(false)
    }
  }

  if (!isMounted) {
    return (
      <div className="min-h-screen bg-background">
        <TopNavigation currentStep="requirement" />
        
        <div className="container mx-auto px-4 py-8">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-2">AI Prompt Architect</h1>
            <p className="text-muted-foreground">
              Transform your ideas into structured, IDE-optimized prompts
            </p>
          </div>

          <div className="flex items-center justify-center min-h-[400px]">
            <div className="text-center">Loading...</div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <TopNavigation currentStep="requirement" />
      
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">AI Prompt Architect</h1>
          <p className="text-muted-foreground">
            Transform your ideas into structured, IDE-optimized prompts
          </p>
        </div>

        <MultiStepForm
          formData={formData}
          onFormDataChange={setFormData}
          onSubmit={handleAnalyze}
          isAnalyzing={isAnalyzing}
          aiProvider={aiProvider}
          onAIProviderChange={setAIProvider}
        />
      </div>
    </div>
  )
}



================================================
FILE: app/prompts/page.tsx
================================================
"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { TopNavigation } from "@/components/top-navigation"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import { Copy, Download, Edit, Save, X, Sparkles, CheckCircle, Code, Terminal, Zap } from "lucide-react"
import type { GeneratedPrompts, EditedPrompts, Analysis } from "@/app/page"
import { ImprovePromptInputDialog } from "@/components/improve-prompt-input-dialog"

const IDE_OPTIONS = [
  { value: "cursor", label: "Cursor IDE" },
  { value: "copilot", label: "GitHub Copilot" },
  { value: "warp", label: "Warp Terminal" },
  { value: "windsurf", label: "Windsurf IDE" },
]

export default function PromptsPage() {
  const router = useRouter()
  const [prompts, setPrompts] = useState<GeneratedPrompts | null>(null)
  const [editedPrompts, setEditedPrompts] = useState<EditedPrompts>({})
  const [selectedIDE, setSelectedIDE] = useState<string>("cursor")
  const [isLoading, setIsLoading] = useState(true)
  const [copiedPrompt, setCopiedPrompt] = useState<string | null>(null)
  const [editMode, setEditMode] = useState<Record<string, boolean>>({})
  const [tempEditContent, setTempEditContent] = useState<Record<string, string>>({})
  const [improveDialogOpen, setImproveDialogOpen] = useState(false)
  const [currentImproveIde, setCurrentImproveIde] = useState<keyof GeneratedPrompts | null>(null)
  const { toast } = useToast()

  useEffect(() => {
    // Load prompts from localStorage
    const savedPrompts = localStorage.getItem("currentPrompts")
    const savedEditedPrompts = localStorage.getItem("currentEditedPrompts")

    if (savedPrompts) {
      setPrompts(JSON.parse(savedPrompts))
    }
    if (savedEditedPrompts) {
      setEditedPrompts(JSON.parse(savedEditedPrompts))
    }

    setIsLoading(false)

    // If no prompts data, redirect to home
    if (!savedPrompts) {
      router.push("/")
    }
  }, [router])

  // Save edited prompts to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("currentEditedPrompts", JSON.stringify(editedPrompts))
  }, [editedPrompts])

  const getCurrentPrompt = () => {
    if (!prompts) return ""
    const ideKey = selectedIDE as keyof GeneratedPrompts
    return editedPrompts[ideKey] || prompts[ideKey] || ""
  }

  const getCurrentContent = (ide: keyof GeneratedPrompts): string => {
    if (!prompts) return ""
    return editedPrompts[ide] || prompts[ide] || ""
  }

  const handleCopyPrompt = async (ideType?: keyof GeneratedPrompts) => {
    const prompt = ideType ? getCurrentContent(ideType) : getCurrentPrompt()
    const type = ideType || selectedIDE
    
    if (prompt) {
      try {
        await navigator.clipboard.writeText(prompt)
        setCopiedPrompt(type)
        toast({
          title: "Copied to clipboard",
          description: `${type.charAt(0).toUpperCase() + type.slice(1)} prompt copied successfully`,
        })
        setTimeout(() => setCopiedPrompt(null), 2000)
      } catch (error) {
        toast({
          title: "Copy failed",
          description: "Failed to copy prompt to clipboard",
          variant: "destructive",
        })
      }
    }
  }

  const handleDownloadPrompt = () => {
    const prompt = getCurrentPrompt()
    const selectedIDEData = IDE_OPTIONS.find(ide => ide.value === selectedIDE)
    
    if (prompt && selectedIDEData) {
      const blob = new Blob([prompt], { type: "text/plain" })
      const url = URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `${selectedIDEData.label.replace(" ", "_")}_prompt.txt`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    }
  }

  const handleEditToggle = (ide: keyof GeneratedPrompts) => {
    const isEditing = editMode[ide]
    if (isEditing) {
      // Save the edit
      const newContent = tempEditContent[ide] || getCurrentContent(ide)
      setEditedPrompts(prev => ({ ...prev, [ide]: newContent }))
      setEditMode(prev => ({ ...prev, [ide]: false }))
      toast({
        title: "Changes saved",
        description: `${ide.charAt(0).toUpperCase() + ide.slice(1)} prompt has been updated`,
      })
    } else {
      // Start editing
      setTempEditContent(prev => ({ ...prev, [ide]: getCurrentContent(ide) }))
      setEditMode(prev => ({ ...prev, [ide]: true }))
    }
  }

  const handleCancelEdit = (ide: keyof GeneratedPrompts) => {
    setEditMode(prev => ({ ...prev, [ide]: false }))
    setTempEditContent(prev => ({ ...prev, [ide]: getCurrentContent(ide) }))
  }

  const handleImproveClick = (ide: keyof GeneratedPrompts) => {
    setCurrentImproveIde(ide)
    setImproveDialogOpen(true)
  }

  const handlePromptImproved = (improvedPrompt: string) => {
    if (currentImproveIde) {
      setEditedPrompts(prev => ({ ...prev, [currentImproveIde]: improvedPrompt }))
    }
  }

  const handleStartOver = () => {
    // Clear all localStorage data
    localStorage.removeItem("currentAnalysis")
    localStorage.removeItem("currentRequirement")
    localStorage.removeItem("currentFormData")
    localStorage.removeItem("currentPrompts")
    localStorage.removeItem("currentEditedPrompts")
    localStorage.removeItem("currentIterations")
    localStorage.removeItem("currentIterationIndex")
    localStorage.removeItem("currentAIProvider")
    router.push("/")
  }

  const getIdeIcon = (ide: string) => {
    switch (ide) {
      case "cursor":
        return <Code className="h-4 w-4" />
      case "copilot":
        return <Zap className="h-4 w-4" />
      case "warp":
        return <Terminal className="h-4 w-4" />
      case "windsurf":
        return <Code className="h-4 w-4" />
      default:
        return <Code className="h-4 w-4" />
    }
  }

  const getIdeColor = (ide: string) => {
    switch (ide) {
      case "cursor":
        return "bg-blue-500"
      case "copilot":
        return "bg-green-500"
      case "warp":
        return "bg-purple-500"
      case "windsurf":
        return "bg-orange-500"
      default:
        return "bg-gray-500"
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background">
        <TopNavigation currentStep="prompt" />
        <div className="flex items-center justify-center min-h-[calc(100vh-80px)]">
          <div className="text-center">Loading prompts...</div>
        </div>
      </div>
    )
  }

  if (!prompts) {
    return (
      <div className="min-h-screen bg-background">
        <TopNavigation currentStep="prompt" />
        <div className="flex items-center justify-center min-h-[calc(100vh-80px)]">
          <div className="text-center">
            <p className="text-muted-foreground mb-4">No prompts found</p>
            <button 
              onClick={() => router.push("/")}
              className="px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90"
            >
              Start New Session
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <TopNavigation currentStep="prompt" />
      
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">Generated Prompts</h1>
          <p className="text-muted-foreground">
            Edit, improve, and copy IDE-optimized prompts
          </p>
        </div>

        <div className="bg-card rounded-lg border shadow-sm p-6">
          {/* Quick IDE Selector */}
          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">
              Quick Select IDE
            </label>
            <Select value={selectedIDE} onValueChange={setSelectedIDE}>
              <SelectTrigger className="w-full max-w-md">
                <SelectValue placeholder="Choose your IDE" />
              </SelectTrigger>
              <SelectContent>
                {IDE_OPTIONS.map((ide) => (
                  <SelectItem key={ide.value} value={ide.value}>
                    {ide.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Tabs for All IDEs */}
          <Tabs defaultValue="cursor" className="space-y-4">
            <TabsList className="grid w-full grid-cols-4">
              {Object.keys(prompts).map((ide) => (
                <TabsTrigger key={ide} value={ide} className="flex items-center gap-2">
                  <div className={`w-2 h-2 rounded-full ${getIdeColor(ide)}`} />
                  {ide.charAt(0).toUpperCase() + ide.slice(1)}
                </TabsTrigger>
              ))}
            </TabsList>

            {Object.entries(prompts).map(([ide, content]) => {
              const ideKey = ide as keyof GeneratedPrompts
              const currentContent = getCurrentContent(ideKey)
              const isEdited = !!editedPrompts[ideKey]
              const isEditing = editMode[ide]
              
              return (
                <TabsContent key={ide} value={ide} className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      {getIdeIcon(ide)}
                      <h3 className="font-medium">{ide.charAt(0).toUpperCase() + ide.slice(1)} Prompt</h3>
                      <Badge variant="secondary" className="text-xs">
                        {currentContent.length} chars
                      </Badge>
                      {isEdited && (
                        <Badge variant="outline" className="text-xs bg-yellow-50 text-yellow-700 border-yellow-200">
                          Modified
                        </Badge>
                      )}
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleImproveClick(ideKey)}
                        className="flex items-center gap-2"
                      >
                        <Sparkles className="h-4 w-4" />
                        Improve
                      </Button>
                      {isEditing ? (
                        <>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleCancelEdit(ideKey)}
                            className="flex items-center gap-2"
                          >
                            <X className="h-4 w-4" />
                            Cancel
                          </Button>
                          <Button
                            variant="default"
                            size="sm"
                            onClick={() => handleEditToggle(ideKey)}
                            className="flex items-center gap-2"
                          >
                            <Save className="h-4 w-4" />
                            Save
                          </Button>
                        </>
                      ) : (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEditToggle(ideKey)}
                          className="flex items-center gap-2"
                        >
                          <Edit className="h-4 w-4" />
                          Edit
                        </Button>
                      )}
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleCopyPrompt(ideKey)}
                        className="flex items-center gap-2"
                      >
                        {copiedPrompt === ide ? (
                          <>
                            <CheckCircle className="h-4 w-4 text-green-600" />
                            Copied!
                          </>
                        ) : (
                          <>
                            <Copy className="h-4 w-4" />
                            Copy
                          </>
                        )}
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleDownloadPrompt}
                        className="flex items-center gap-2"
                      >
                        <Download className="h-4 w-4" />
                        Download
                      </Button>
                    </div>
                  </div>

                  <Textarea 
                    value={isEditing ? (tempEditContent[ide] || currentContent) : currentContent}
                    onChange={(e) => isEditing && setTempEditContent(prev => ({ ...prev, [ide]: e.target.value }))}
                    readOnly={!isEditing}
                    className={`min-h-[400px] font-mono text-sm resize-none ${
                      isEditing ? 'border-primary' : ''
                    } ${
                      isEdited && !isEditing ? 'bg-yellow-50/50 border-yellow-200' : ''
                    }`}
                  />
                </TabsContent>
              )
            })}
          </Tabs>

          {/* Actions */}
          <div className="flex justify-center gap-4 mt-6 pt-6 border-t">
            <Button
              variant="outline"
              onClick={() => router.push("/analyse")}
            >
              Back to Analysis
            </Button>
            <Button
              variant="outline"
              onClick={handleStartOver}
            >
              Start New Session
            </Button>
          </div>
        </div>
      </div>

      <ImprovePromptInputDialog
        open={improveDialogOpen}
        onOpenChange={setImproveDialogOpen}
        originalPrompt={currentImproveIde ? getCurrentContent(currentImproveIde) : ""}
        ideType={currentImproveIde || "cursor"}
        onPromptImproved={handlePromptImproved}
        requirement=""
        analysis={undefined}
      />
    </div>
  )
}



================================================
FILE: components/ai-provider-toggle.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Bot, Brain, Sparkles, Zap } from "lucide-react"
import { cn } from "@/lib/utils"
import { AIProvider, AI_PROVIDERS } from "@/lib/ai-types"

interface AIProviderToggleProps {
  provider: AIProvider
  onProviderChange: (provider: AIProvider) => void
  className?: string
}

export function AIProviderToggle({ provider, onProviderChange, className }: AIProviderToggleProps) {
  const [isOpen, setIsOpen] = useState(false)

  const toggleProvider = () => {
    const newProvider = provider === AI_PROVIDERS.GEMINI ? AI_PROVIDERS.OPENAI : AI_PROVIDERS.GEMINI
    onProviderChange(newProvider)
  }

  const getProviderInfo = (provider: AIProvider) => {
    switch (provider) {
      case AI_PROVIDERS.GEMINI:
        return {
          name: "Google Gemini",
          icon: <Bot className="w-4 h-4" />,
          color: "text-blue-600",
          bgColor: "bg-blue-50 dark:bg-blue-950/20",
          borderColor: "border-blue-200 dark:border-blue-800",
          description: "Advanced AI model for comprehensive analysis"
        }
      case AI_PROVIDERS.OPENAI:
        return {
          name: "OpenAI GPT-4",
          icon: <Brain className="w-4 h-4" />,
          color: "text-green-600",
          bgColor: "bg-green-50 dark:bg-green-950/20",
          borderColor: "border-green-200 dark:border-green-800",
          description: "Powerful language model for detailed insights"
        }
      default:
        return {
          name: "Unknown",
          icon: <Sparkles className="w-4 h-4" />,
          color: "text-gray-600",
          bgColor: "bg-gray-50 dark:bg-gray-950/20",
          borderColor: "border-gray-200 dark:border-gray-800",
          description: "AI provider not specified"
        }
    }
  }

  const currentProviderInfo = getProviderInfo(provider)

  return (
    <div className={cn("space-y-3", className)}>
      <div className="flex items-center justify-between">
        <Label className="text-sm font-medium text-muted-foreground">
          AI Provider
        </Label>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setIsOpen(!isOpen)}
          className="h-8 px-2 text-xs"
        >
          {isOpen ? "Hide Details" : "Show Details"}
        </Button>
      </div>

      {/* Main Toggle */}
      <Card className={cn(
        "border-2 transition-all duration-200 hover:shadow-md",
        currentProviderInfo.borderColor,
        currentProviderInfo.bgColor
      )}>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className={cn("p-2 rounded-lg", currentProviderInfo.bgColor)}>
                <span className={currentProviderInfo.color}>
                  {currentProviderInfo.icon}
                </span>
              </div>
              <div>
                <div className="font-medium text-sm">{currentProviderInfo.name}</div>
                <div className="text-xs text-muted-foreground">
                  {currentProviderInfo.description}
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Switch
                checked={provider === AI_PROVIDERS.OPENAI}
                onCheckedChange={toggleProvider}
                className="data-[state=checked]:bg-green-600"
              />
              <Badge 
                variant="secondary" 
                className={cn(
                  "text-xs",
                  provider === AI_PROVIDERS.GEMINI ? "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300" :
                  "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                )}
              >
                {provider === AI_PROVIDERS.GEMINI ? "Gemini" : "GPT-4"}
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Detailed Information */}
      {isOpen && (
        <div className="space-y-3">
          <div className="grid grid-cols-2 gap-3">
            <Card className={cn(
              "border-2 transition-all duration-200",
              provider === AI_PROVIDERS.GEMINI 
                ? "border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-950/20" 
                : "border-gray-200 bg-gray-50 dark:border-gray-800 dark:bg-gray-950/20"
            )}>
              <CardContent className="p-3">
                <div className="flex items-center gap-2 mb-2">
                  <Bot className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium">Google Gemini</span>
                </div>
                <div className="text-xs text-muted-foreground space-y-1">
                  <div>• Fast response times</div>
                  <div>• Cost-effective</div>
                  <div>• Good for analysis</div>
                </div>
              </CardContent>
            </Card>

            <Card className={cn(
              "border-2 transition-all duration-200",
              provider === AI_PROVIDERS.OPENAI 
                ? "border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20" 
                : "border-gray-200 bg-gray-50 dark:border-gray-800 dark:bg-gray-950/20"
            )}>
              <CardContent className="p-3">
                <div className="flex items-center gap-2 mb-2">
                  <Brain className="w-4 h-4 text-green-600" />
                  <span className="text-sm font-medium">OpenAI GPT-4</span>
                </div>
                <div className="text-xs text-muted-foreground space-y-1">
                  <div>• High accuracy</div>
                  <div>• Advanced reasoning</div>
                  <div>• Premium quality</div>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="text-xs text-muted-foreground text-center">
            <Zap className="w-3 h-3 inline mr-1" />
            Switch between providers to compare results and find the best fit for your needs
          </div>
        </div>
      )}
    </div>
  )
}



================================================
FILE: components/analysis-panel.tsx
================================================
"use client"

import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Separator } from "@/components/ui/separator"
import { CheckCircle, AlertCircle, HelpCircle, Target, Shield, Link, AlertTriangle, Zap, Loader2 } from "lucide-react"
import type { Analysis, Question } from "@/app/page"

interface AnalysisPanelProps {
  analysis: Analysis
  onUpdate: (analysis: Analysis) => void
  onGeneratePrompts: () => void
  isGenerating: boolean
}

export function AnalysisPanel({ analysis, onUpdate, onGeneratePrompts, isGenerating }: AnalysisPanelProps) {
  const [localAnalysis, setLocalAnalysis] = useState(analysis)

  // Keep local state in sync when parent analysis changes (e.g., after edits or iterations)
  // Only update if there are actual structural changes, not just user interactions
  useEffect(() => {
    // Only sync if the analysis has meaningfully changed (not just user input changes)
    const hasStructuralChanges = JSON.stringify(analysis) !== JSON.stringify(localAnalysis)
    if (hasStructuralChanges) {
      setLocalAnalysis(analysis)
    }
  }, [analysis]) // Removed localAnalysis from deps to prevent infinite loops

  const handleQuestionAnswer = (questionId: string, answer: string) => {
    const updatedQuestions = localAnalysis.questions.map((q) => (q.id === questionId ? { ...q, answer } : q))
    const updated = { ...localAnalysis, questions: updatedQuestions }
    setLocalAnalysis(updated)
    onUpdate(updated)
  }

  const handleAssumptionToggle = (assumptionId: string, accepted: boolean) => {
    const updatedAssumptions = localAnalysis.assumptions.map((a) => (a.id === assumptionId ? { ...a, accepted } : a))
    const updated = { ...localAnalysis, assumptions: updatedAssumptions }
    setLocalAnalysis(updated)
    onUpdate(updated)
  }

  const getPriorityColor = (priority: Question["priority"]) => {
    switch (priority) {
      case "critical":
        return "destructive"
      case "important":
        return "default"
      case "nice-to-have":
        return "secondary"
    }
  }

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return "text-green-600"
    if (confidence >= 0.6) return "text-yellow-600"
    return "text-red-600"
  }

  const answeredQuestions = localAnalysis.questions.filter((q) => q.answer?.trim()).length
  const totalQuestions = localAnalysis.questions.length
  const acceptedAssumptions = localAnalysis.assumptions.filter((a) => a.accepted).length

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Target className="h-5 w-5 text-primary" />
          Analysis Results
        </CardTitle>
        <CardDescription>Review extracted information and answer clarifying questions</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="overview" className="space-y-4">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="questions" className="relative">
              Questions
              {totalQuestions > 0 && (
                <Badge variant="secondary" className="ml-2 text-xs">
                  {answeredQuestions}/{totalQuestions}
                </Badge>
              )}
            </TabsTrigger>
            <TabsTrigger value="assumptions">
              Assumptions
              <Badge variant="secondary" className="ml-2 text-xs">
                {acceptedAssumptions}
              </Badge>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <Target className="h-4 w-4 text-primary" />
                  <h4 className="font-medium">Goals</h4>
                </div>
                <ul className="space-y-1 text-sm">
                  {localAnalysis.goals.map((goal, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <CheckCircle className="h-3 w-3 text-green-600 mt-0.5 flex-shrink-0" />
                      {goal}
                    </li>
                  ))}
                </ul>
              </div>

              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <Shield className="h-4 w-4 text-orange-600" />
                  <h4 className="font-medium">Constraints</h4>
                </div>
                <ul className="space-y-1 text-sm">
                  {localAnalysis.constraints.map((constraint, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <AlertCircle className="h-3 w-3 text-orange-600 mt-0.5 flex-shrink-0" />
                      {constraint}
                    </li>
                  ))}
                </ul>
              </div>

              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <Link className="h-4 w-4 text-blue-600" />
                  <h4 className="font-medium">Dependencies</h4>
                </div>
                <ul className="space-y-1 text-sm">
                  {localAnalysis.dependencies.map((dependency, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <Link className="h-3 w-3 text-blue-600 mt-0.5 flex-shrink-0" />
                      {dependency}
                    </li>
                  ))}
                </ul>
              </div>

              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-red-600" />
                  <h4 className="font-medium">Edge Cases</h4>
                </div>
                <ul className="space-y-1 text-sm">
                  {localAnalysis.edgeCases.map((edgeCase, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <AlertTriangle className="h-3 w-3 text-red-600 mt-0.5 flex-shrink-0" />
                      {edgeCase}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="questions" className="space-y-4">
            {localAnalysis.questions.map((question) => (
              <div key={question.id} className="space-y-2 p-3 border rounded-lg">
                <div className="flex items-start gap-2">
                  <HelpCircle className="h-4 w-4 text-primary mt-0.5 flex-shrink-0" />
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <p className="text-sm font-medium">{question.text}</p>
                      <Badge variant={getPriorityColor(question.priority)} className="text-xs">
                        {question.priority}
                      </Badge>
                    </div>
                    <Input
                      placeholder="Your answer..."
                      value={question.answer || ""}
                      onChange={(e) => handleQuestionAnswer(question.id, e.target.value)}
                      className="text-sm"
                    />
                  </div>
                </div>
              </div>
            ))}
            {localAnalysis.questions.length === 0 && (
              <p className="text-sm text-muted-foreground text-center py-4">
                No clarifying questions needed. The requirement is clear!
              </p>
            )}
          </TabsContent>

          <TabsContent value="assumptions" className="space-y-4">
            {localAnalysis.assumptions.map((assumption) => (
              <div key={assumption.id} className="flex items-start gap-3 p-3 border rounded-lg">
                <Switch
                  checked={assumption.accepted}
                  onCheckedChange={(checked) => handleAssumptionToggle(assumption.id, checked)}
                />
                <div className="flex-1">
                  <p className="text-sm font-medium mb-1">{assumption.text}</p>
                  <div className="flex items-center gap-2">
                    <span className="text-xs text-muted-foreground">Confidence:</span>
                    <span className={`text-xs font-medium ${getConfidenceColor(assumption.confidence)}`}>
                      {Math.round(assumption.confidence * 100)}%
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </TabsContent>
        </Tabs>

        <Separator className="my-4" />

        <Button onClick={onGeneratePrompts} disabled={isGenerating} className="w-full" size="lg">
          {isGenerating ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Generating IDE Prompts...
            </>
          ) : (
            <>
              <Zap className="mr-2 h-4 w-4" />
              Generate IDE Prompts
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  )
}



================================================
FILE: components/edit-section.tsx
================================================
"use client"

import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Edit, Save, X, Plus, Trash2 } from "lucide-react"
import type { Analysis, Question, Assumption } from "@/app/page"

interface EditSectionProps {
  analysis: Analysis
  onSave: (editedAnalysis: Partial<Analysis>) => void
  onCancel: () => void
  isEditing: boolean
  onToggleEdit: () => void
}

export function EditSection({ 
  analysis, 
  onSave, 
  onCancel, 
  isEditing, 
  onToggleEdit 
}: EditSectionProps) {
  const [editedAnalysis, setEditedAnalysis] = useState<Analysis>(analysis)
  const [hasChanges, setHasChanges] = useState(false)

  // Keep local editable copy in sync if the upstream analysis changes
  useEffect(() => {
    setEditedAnalysis(analysis)
    setHasChanges(false)
  }, [analysis])

  const updateField = (field: keyof Analysis, value: any) => {
    setEditedAnalysis(prev => ({ ...prev, [field]: value }))
    setHasChanges(true)
  }

  const addListItem = (field: 'goals' | 'constraints' | 'dependencies' | 'edgeCases' | 'acceptanceCriteria') => {
    const currentList = editedAnalysis[field] as string[]
    updateField(field, [...currentList, ""])
  }

  const updateListItem = (
    field: 'goals' | 'constraints' | 'dependencies' | 'edgeCases' | 'acceptanceCriteria', 
    index: number, 
    value: string
  ) => {
    const currentList = editedAnalysis[field] as string[]
    const newList = [...currentList]
    newList[index] = value
    updateField(field, newList)
  }

  const removeListItem = (
    field: 'goals' | 'constraints' | 'dependencies' | 'edgeCases' | 'acceptanceCriteria', 
    index: number
  ) => {
    const currentList = editedAnalysis[field] as string[]
    updateField(field, currentList.filter((_, i) => i !== index))
  }

  const addQuestion = () => {
    const newQuestion: Question = {
      id: `q${Date.now()}`,
      text: "",
      priority: "important",
      answer: ""
    }
    updateField('questions', [...editedAnalysis.questions, newQuestion])
  }

  const updateQuestion = (index: number, field: keyof Question, value: any) => {
    const newQuestions = [...editedAnalysis.questions]
    newQuestions[index] = { ...newQuestions[index], [field]: value }
    updateField('questions', newQuestions)
  }

  const removeQuestion = (index: number) => {
    updateField('questions', editedAnalysis.questions.filter((_, i) => i !== index))
  }

  const addAssumption = () => {
    const newAssumption: Assumption = {
      id: `a${Date.now()}`,
      text: "",
      confidence: 0.7,
      accepted: true
    }
    updateField('assumptions', [...editedAnalysis.assumptions, newAssumption])
  }

  const updateAssumption = (index: number, field: keyof Assumption, value: any) => {
    const newAssumptions = [...editedAnalysis.assumptions]
    newAssumptions[index] = { ...newAssumptions[index], [field]: value }
    updateField('assumptions', newAssumptions)
  }

  const removeAssumption = (index: number) => {
    updateField('assumptions', editedAnalysis.assumptions.filter((_, i) => i !== index))
  }

  const handleSave = () => {
    // Filter out empty items before saving
    const cleanedAnalysis = {
      ...editedAnalysis,
      goals: editedAnalysis.goals.filter(item => item.trim() !== ''),
      constraints: editedAnalysis.constraints.filter(item => item.trim() !== ''),
      dependencies: editedAnalysis.dependencies.filter(item => item.trim() !== ''),
      edgeCases: editedAnalysis.edgeCases.filter(item => item.trim() !== ''),
      acceptanceCriteria: editedAnalysis.acceptanceCriteria.filter(item => item.trim() !== ''),
      questions: editedAnalysis.questions.filter(q => q.text.trim() !== ''),
      assumptions: editedAnalysis.assumptions.filter(a => a.text.trim() !== '')
    }
    
    onSave(cleanedAnalysis)
    setHasChanges(false)
    onToggleEdit()
  }

  const handleCancel = () => {
    setEditedAnalysis(analysis)
    setHasChanges(false)
    onCancel()
    onToggleEdit()
  }

  const renderEditableList = (
    title: string,
    field: 'goals' | 'constraints' | 'dependencies' | 'edgeCases' | 'acceptanceCriteria',
    icon: React.ReactNode
  ) => (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          {icon}
          <h4 className="font-medium">{title}</h4>
        </div>
        {isEditing && (
          <Button
            variant="outline"
            size="sm"
            onClick={() => addListItem(field)}
            className="h-8 w-8 p-0"
          >
            <Plus className="h-4 w-4" />
          </Button>
        )}
      </div>
      <div className="space-y-2">
        {(editedAnalysis[field] as string[]).map((item, index) => (
          <div key={index} className="flex items-center gap-2">
            {isEditing ? (
              <>
                <Textarea
                  value={item}
                  onChange={(e) => updateListItem(field, index, e.target.value)}
                  className="min-h-[60px] text-sm"
                  placeholder={`Enter ${title.toLowerCase().slice(0, -1)}...`}
                />
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => removeListItem(field, index)}
                  className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </>
            ) : (
              <p className="text-sm p-2 bg-muted rounded border">{item}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  )

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Edit className="h-5 w-5 text-primary" />
            Analysis Editor
          </CardTitle>
          <div className="flex items-center gap-2">
            {hasChanges && (
              <Badge variant="outline" className="text-yellow-600 border-yellow-300">
                Unsaved Changes
              </Badge>
            )}
            {isEditing ? (
              <>
                <Button variant="outline" size="sm" onClick={handleCancel}>
                  <X className="h-4 w-4 mr-1" />
                  Cancel
                </Button>
                <Button size="sm" onClick={handleSave} disabled={!hasChanges}>
                  <Save className="h-4 w-4 mr-1" />
                  Save Changes
                </Button>
              </>
            ) : (
              <Button variant="outline" size="sm" onClick={onToggleEdit}>
                <Edit className="h-4 w-4 mr-1" />
                Edit Analysis
              </Button>
            )}
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Goals */}
        {renderEditableList(
          "Goals",
          "goals",
          <div className="h-4 w-4 bg-green-600 rounded-full" />
        )}

        <Separator />

        {/* Constraints */}
        {renderEditableList(
          "Constraints",
          "constraints",
          <div className="h-4 w-4 bg-orange-600 rounded-full" />
        )}

        <Separator />

        {/* Dependencies */}
        {renderEditableList(
          "Dependencies",
          "dependencies",
          <div className="h-4 w-4 bg-blue-600 rounded-full" />
        )}

        <Separator />

        {/* Edge Cases */}
        {renderEditableList(
          "Edge Cases",
          "edgeCases",
          <div className="h-4 w-4 bg-red-600 rounded-full" />
        )}

        <Separator />

        {/* Acceptance Criteria */}
        {renderEditableList(
          "Acceptance Criteria",
          "acceptanceCriteria",
          <div className="h-4 w-4 bg-purple-600 rounded-full" />
        )}

        <Separator />

        {/* Questions */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h4 className="font-medium">Questions</h4>
            {isEditing && (
              <Button
                variant="outline"
                size="sm"
                onClick={addQuestion}
                className="h-8 w-8 p-0"
              >
                <Plus className="h-4 w-4" />
              </Button>
            )}
          </div>
          <div className="space-y-3">
            {editedAnalysis.questions.map((question, index) => (
              <div key={question.id} className="p-3 border rounded-lg space-y-2">
                <div className="flex items-center gap-2">
                  {isEditing ? (
                    <>
                      <Textarea
                        value={question.text}
                        onChange={(e) => updateQuestion(index, 'text', e.target.value)}
                        className="flex-1 min-h-[60px]"
                        placeholder="Enter question..."
                      />
                      <select
                        value={question.priority}
                        onChange={(e) => updateQuestion(index, 'priority', e.target.value)}
                        className="px-2 py-1 border rounded text-sm"
                      >
                        <option value="critical">Critical</option>
                        <option value="important">Important</option>
                        <option value="nice-to-have">Nice to Have</option>
                      </select>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => removeQuestion(index)}
                        className="h-8 w-8 p-0 text-red-600"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </>
                  ) : (
                    <>
                      <p className="flex-1 text-sm">{question.text}</p>
                      <Badge variant="outline" className="text-xs">
                        {question.priority}
                      </Badge>
                    </>
                  )}
                </div>
                {question.answer && !isEditing && (
                  <p className="text-sm text-muted-foreground bg-muted p-2 rounded">
                    Answer: {question.answer}
                  </p>
                )}
              </div>
            ))}
          </div>
        </div>

        <Separator />

        {/* Assumptions */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h4 className="font-medium">Assumptions</h4>
            {isEditing && (
              <Button
                variant="outline"
                size="sm"
                onClick={addAssumption}
                className="h-8 w-8 p-0"
              >
                <Plus className="h-4 w-4" />
              </Button>
            )}
          </div>
          <div className="space-y-3">
            {editedAnalysis.assumptions.map((assumption, index) => (
              <div key={assumption.id} className="p-3 border rounded-lg space-y-2">
                <div className="flex items-start gap-2">
                  {isEditing ? (
                    <>
                      <Textarea
                        value={assumption.text}
                        onChange={(e) => updateAssumption(index, 'text', e.target.value)}
                        className="flex-1 min-h-[60px]"
                        placeholder="Enter assumption..."
                      />
                      <div className="flex flex-col gap-1">
                        <input
                          type="range"
                          min="0"
                          max="1"
                          step="0.1"
                          value={assumption.confidence}
                          onChange={(e) => updateAssumption(index, 'confidence', parseFloat(e.target.value))}
                          className="w-20"
                        />
                        <span className="text-xs text-center">
                          {Math.round(assumption.confidence * 100)}%
                        </span>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => removeAssumption(index)}
                        className="h-8 w-8 p-0 text-red-600"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </>
                  ) : (
                    <>
                      <p className="flex-1 text-sm">{assumption.text}</p>
                      <Badge variant={assumption.accepted ? "default" : "secondary"} className="text-xs">
                        {Math.round(assumption.confidence * 100)}% confidence
                      </Badge>
                    </>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}



================================================
FILE: components/header.tsx
================================================
import { Button } from "@/components/ui/button"
import { ModeToggle } from "@/components/mode-toggle"
import { Brain, Github } from "lucide-react"

export function Header() {
  return (
    <header className="border-b bg-card">
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="flex items-center justify-center w-10 h-10 bg-primary rounded-lg">
              <Brain className="h-6 w-6 text-primary-foreground" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-foreground">AI IDE Prompt Agent</h1>
              <p className="text-sm text-muted-foreground">Transform requirements into structured IDE prompts</p>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" asChild>
              <a
                href="https://github.com"
                target="_blank"
                rel="noopener noreferrer"
                className="flex items-center gap-2"
              >
                <Github className="h-4 w-4" />
                GitHub
              </a>
            </Button>
            <ModeToggle />
          </div>
        </div>
      </div>
    </header>
  )
}



================================================
FILE: components/history-panel.tsx
================================================
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { History, Clock, FileText, Zap } from "lucide-react"
import type { Session } from "@/app/page"

interface HistoryPanelProps {
  sessions: Session[]
  onLoadSession: (session: Session) => void
}

export function HistoryPanel({ sessions, onLoadSession }: HistoryPanelProps) {
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat("en-US", {
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    }).format(date)
  }

  const truncateText = (text: string, maxLength = 100) => {
    return text.length > maxLength ? text.substring(0, maxLength) + "..." : text
  }

  if (sessions.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <History className="h-5 w-5 text-primary" />
            Session History
          </CardTitle>
          <CardDescription>Your previous prompt generation sessions will appear here</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <History className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <p className="text-muted-foreground">No sessions yet</p>
            <p className="text-sm text-muted-foreground mt-1">Generate your first prompt to see it here</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <History className="h-5 w-5 text-primary" />
          Session History
        </CardTitle>
        <CardDescription>Browse and restore previous prompt generation sessions</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {sessions.map((session, index) => (
            <div key={session.id}>
              <div className="flex items-start justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors">
                <div className="flex-1 space-y-2">
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">{formatDate(session.timestamp)}</span>
                    <div className="flex gap-1">
                      {session.analysis && (
                        <Badge variant="secondary" className="text-xs">
                          <FileText className="h-3 w-3 mr-1" />
                          Analyzed
                        </Badge>
                      )}
                      {session.prompts && (
                        <Badge variant="secondary" className="text-xs">
                          <Zap className="h-3 w-3 mr-1" />
                          Prompts
                        </Badge>
                      )}
                    </div>
                  </div>

                  <p className="text-sm font-medium">{truncateText(session.requirement)}</p>

                  {session.analysis && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      <Badge variant="outline" className="text-xs">
                        {session.analysis.goals.length} goals
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {session.analysis.questions.length} questions
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {session.analysis.assumptions.length} assumptions
                      </Badge>
                    </div>
                  )}
                </div>

                <Button variant="outline" size="sm" onClick={() => onLoadSession(session)} className="ml-4">
                  Load
                </Button>
              </div>
              {index < sessions.length - 1 && <Separator className="mt-4" />}
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}



================================================
FILE: components/improve-prompt-dialog.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { Loader2, Sparkles } from "lucide-react"
import type { Analysis } from "@/app/page"

interface ImprovePromptDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  originalPrompt: string
  ideType: string
  onPromptImproved: (improvedPrompt: string) => void
  requirement?: string
  analysis?: Analysis
}

export function ImprovePromptDialog({
  open,
  onOpenChange,
  originalPrompt,
  ideType,
  onPromptImproved,
  requirement,
  analysis,
}: ImprovePromptDialogProps) {
  const [improvementInstructions, setImprovementInstructions] = useState("")
  const [isImproving, setIsImproving] = useState(false)
  const { toast } = useToast()

  const handleImprove = async () => {
    if (!improvementInstructions.trim()) {
      toast({
        title: "Missing instructions",
        description: "Please provide instructions for how to improve the prompt.",
        variant: "destructive",
      })
      return
    }

    setIsImproving(true)

    try {
      const response = await fetch('/api/prompts/improve', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          originalPrompt,
          ideType,
          improvementInstructions,
          requirement,
          analysis,
        }),
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Failed to improve prompt')
      }

      onPromptImproved(result.data.improvedPrompt)
      setImprovementInstructions("")
      onOpenChange(false)

      toast({
        title: "Prompt improved!",
        description: `${ideType.charAt(0).toUpperCase() + ideType.slice(1)} prompt has been enhanced based on your feedback.`,
      })
    } catch (error) {
      console.error('Improve prompt error:', error)
      toast({
        title: "Improvement failed",
        description: error instanceof Error ? error.message : "Failed to improve prompt. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsImproving(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-primary" />
            Improve {ideType.charAt(0).toUpperCase() + ideType.slice(1)} Prompt
          </DialogTitle>
          <DialogDescription>
            Describe how you'd like to enhance or modify this prompt. The AI will generate an improved version based on your feedback.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <Label htmlFor="original-prompt">Current Prompt</Label>
            <Textarea
              id="original-prompt"
              value={originalPrompt}
              readOnly
              className="min-h-[200px] font-mono text-sm resize-none bg-muted mt-2"
            />
          </div>

          <div>
            <Label htmlFor="improvement-instructions">Improvement Instructions</Label>
            <Textarea
              id="improvement-instructions"
              value={improvementInstructions}
              onChange={(e) => setImprovementInstructions(e.target.value)}
              placeholder="Example: Make it more specific for React development, add error handling details, focus more on testing, make it shorter and more concise, etc."
              className="min-h-[120px] mt-2"
            />
          </div>
        </div>

        <DialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isImproving}
          >
            Cancel
          </Button>
          <Button
            onClick={handleImprove}
            disabled={isImproving || !improvementInstructions.trim()}
          >
            {isImproving ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Improving...
              </>
            ) : (
              <>
                <Sparkles className="mr-2 h-4 w-4" />
                Improve Prompt
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}



================================================
FILE: components/improve-prompt-input-dialog.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { Loader2, Sparkles, Send } from "lucide-react"
import type { Analysis } from "@/app/page"

interface ImprovePromptInputDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  originalPrompt: string
  ideType: string
  onPromptImproved: (improvedPrompt: string) => void
  requirement?: string
  analysis?: Analysis
}

export function ImprovePromptInputDialog({
  open,
  onOpenChange,
  originalPrompt,
  ideType,
  onPromptImproved,
  requirement,
  analysis,
}: ImprovePromptInputDialogProps) {
  const [improvementInstructions, setImprovementInstructions] = useState("")
  const [isImproving, setIsImproving] = useState(false)
  const { toast } = useToast()

  const handleImprove = async () => {
    if (!improvementInstructions.trim()) {
      toast({
        title: "Missing instructions",
        description: "Please provide instructions for how to improve the prompt.",
        variant: "destructive",
      })
      return
    }

    setIsImproving(true)

    try {
      const response = await fetch('/api/prompts/improve', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          originalPrompt,
          ideType,
          improvementInstructions,
          requirement,
          analysis,
        }),
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Failed to improve prompt')
      }

      onPromptImproved(result.data.improvedPrompt)
      setImprovementInstructions("")
      onOpenChange(false)

      toast({
        title: "Prompt improved!",
        description: `${ideType.charAt(0).toUpperCase() + ideType.slice(1)} prompt has been enhanced based on your feedback.`,
      })
    } catch (error) {
      console.error('Improve prompt error:', error)
      toast({
        title: "Improvement failed",
        description: error instanceof Error ? error.message : "Failed to improve prompt. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsImproving(false)
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault()
      handleImprove()
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-lg">
            <Sparkles className="h-5 w-5 text-primary" />
            Improve {ideType.charAt(0).toUpperCase() + ideType.slice(1)} Prompt
          </DialogTitle>
          <DialogDescription className="text-sm">
            Tell us how you'd like to enhance this prompt
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-3">
          <div>
            <Label htmlFor="improvement-instructions" className="text-sm font-medium">
              What would you like to improve?
            </Label>
            <Textarea
              id="improvement-instructions"
              value={improvementInstructions}
              onChange={(e) => setImprovementInstructions(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="e.g., Make it more specific for React, add error handling, focus on testing..."
              className="min-h-[100px] mt-2 text-sm resize-none"
              disabled={isImproving}
            />
            <p className="text-xs text-muted-foreground mt-1">
              Press Ctrl+Enter to submit
            </p>
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isImproving}
            size="sm"
          >
            Cancel
          </Button>
          <Button
            onClick={handleImprove}
            disabled={isImproving || !improvementInstructions.trim()}
            size="sm"
          >
            {isImproving ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Improving...
              </>
            ) : (
              <>
                <Send className="mr-2 h-4 w-4" />
                Improve
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}



================================================
FILE: components/iteration-display.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { 
  History, 
  ChevronLeft, 
  ChevronRight, 
  Eye, 
  GitCompare, 
  Clock,
  CheckCircle2,
  AlertCircle,
  Target,
  Shield,
  Link,
  AlertTriangle,
  Zap
} from "lucide-react"
import type { Analysis } from "@/app/page"

export interface AnalysisIteration {
  id: string
  timestamp: Date
  analysis: Analysis
  userEdits?: Partial<Analysis>
  userFeedback?: string
  iterationNumber: number
  isUserSatisfied: boolean
}

interface IterationDisplayProps {
  iterations: AnalysisIteration[]
  currentIteration: number
  onSelectIteration: (index: number) => void
  onCompareIterations?: (iteration1: number, iteration2: number) => void
}

export function IterationDisplay({ 
  iterations, 
  currentIteration, 
  onSelectIteration,
  onCompareIterations 
}: IterationDisplayProps) {
  const [compareMode, setCompareMode] = useState(false)
  const [compareWith, setCompareWith] = useState<number | null>(null)
  const [viewMode, setViewMode] = useState<'timeline' | 'comparison'>('timeline')

  const formatTimestamp = (timestamp: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      month: 'short',
      day: 'numeric'
    }).format(new Date(timestamp))
  }

  const getIterationStatus = (iteration: AnalysisIteration) => {
    if (iteration.isUserSatisfied) return { color: 'bg-green-500', text: 'Satisfied' }
    if (iteration.userEdits) return { color: 'bg-yellow-500', text: 'Modified' }
    return { color: 'bg-blue-500', text: 'Generated' }
  }

  const renderAnalysisSection = (analysis: Analysis, title: string) => (
    <div className="space-y-4">
      <h4 className="font-medium text-sm text-muted-foreground">{title}</h4>
      
      {/* Goals */}
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Target className="h-4 w-4 text-green-600" />
          <span className="text-sm font-medium">Goals ({analysis.goals.length})</span>
        </div>
        <div className="pl-6 space-y-1">
          {analysis.goals.map((goal, index) => (
            <p key={index} className="text-sm text-muted-foreground">• {goal}</p>
          ))}
        </div>
      </div>

      {/* Constraints */}
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Shield className="h-4 w-4 text-orange-600" />
          <span className="text-sm font-medium">Constraints ({analysis.constraints.length})</span>
        </div>
        <div className="pl-6 space-y-1">
          {analysis.constraints.map((constraint, index) => (
            <p key={index} className="text-sm text-muted-foreground">• {constraint}</p>
          ))}
        </div>
      </div>

      {/* Dependencies */}
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Link className="h-4 w-4 text-blue-600" />
          <span className="text-sm font-medium">Dependencies ({analysis.dependencies.length})</span>
        </div>
        <div className="pl-6 space-y-1">
          {analysis.dependencies.map((dependency, index) => (
            <p key={index} className="text-sm text-muted-foreground">• {dependency}</p>
          ))}
        </div>
      </div>

      {/* Questions & Assumptions Summary */}
      <div className="flex gap-4 text-sm">
        <Badge variant="outline">
          {analysis.questions.length} Questions
        </Badge>
        <Badge variant="outline">
          {analysis.assumptions.length} Assumptions
        </Badge>
        <Badge variant="outline">
          {analysis.assumptions.filter(a => a.accepted).length} Accepted
        </Badge>
      </div>
    </div>
  )

  const renderTimeline = () => (
    <ScrollArea className="h-96">
      <div className="space-y-4 p-4">
        {iterations.map((iteration, index) => {
          const status = getIterationStatus(iteration)
          const isActive = index === currentIteration
          
          return (
            <div
              key={iteration.id}
              className={`relative p-4 border rounded-lg cursor-pointer transition-all ${
                isActive ? 'border-primary bg-primary/5' : 'hover:bg-muted/50'
              }`}
              onClick={() => onSelectIteration(index)}
              role="button"
              tabIndex={0}
              aria-label={`Select iteration ${iteration.iterationNumber}, ${status.text}, created ${formatTimestamp(iteration.timestamp)}`}
              onKeyDown={(e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                  e.preventDefault()
                  onSelectIteration(index)
                }
              }}
            >
              {/* Timeline connector */}
              {index < iterations.length - 1 && (
                <div className="absolute left-6 top-12 w-0.5 h-8 bg-border" />
              )}
              
              <div className="flex items-start gap-3">
                {/* Status indicator */}
                <div className={`w-3 h-3 rounded-full ${status.color} mt-2 flex-shrink-0`} />
                
                <div className="flex-1 space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-sm">
                        Iteration {iteration.iterationNumber}
                      </span>
                      <Badge variant="outline" className="text-xs">
                        {status.text}
                      </Badge>
                      {isActive && (
                        <Badge variant="default" className="text-xs">
                          Current
                        </Badge>
                      )}
                    </div>
                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <Clock className="h-3 w-3" />
                      {formatTimestamp(iteration.timestamp)}
                    </div>
                  </div>
                  
                  {/* Quick stats */}
                  <div className="flex gap-2 text-xs">
                    <span>{iteration.analysis.goals.length} goals</span>
                    <span>•</span>
                    <span>{iteration.analysis.constraints.length} constraints</span>
                    <span>•</span>
                    <span>{iteration.analysis.questions.length} questions</span>
                  </div>
                  
                  {/* User feedback if available */}
                  {iteration.userFeedback && (
                    <p className="text-xs text-muted-foreground bg-muted p-2 rounded">
                      Feedback: {iteration.userFeedback}
                    </p>
                  )}
                  
                  {/* Action buttons */}
                  <div className="flex gap-2 pt-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation()
                        onSelectIteration(index)
                      }}
                      className="h-7 text-xs"
                    >
                      <Eye className="h-3 w-3 mr-1" />
                      View
                    </Button>
                    {onCompareIterations && index !== currentIteration && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation()
                          onCompareIterations(currentIteration, index)
                          setViewMode('comparison')
                        }}
                        className="h-7 text-xs"
                      >
                        <GitCompare className="h-3 w-3 mr-1" />
                        Compare
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </ScrollArea>
  )

  const renderComparison = () => {
    if (!compareWith || compareWith === currentIteration) {
      return (
        <div className="flex items-center justify-center h-96 text-muted-foreground">
          <p>Select two different iterations to compare</p>
        </div>
      )
    }

    const current = iterations[currentIteration]
    const compare = iterations[compareWith]

    return (
      <ScrollArea className="h-96">
        <div className="grid grid-cols-2 gap-4 p-4">
          <div className="space-y-4">
            <div className="flex items-center gap-2 pb-2 border-b">
              <Badge variant="default">Current</Badge>
              <span className="text-sm font-medium">
                Iteration {current.iterationNumber}
              </span>
              <span className="text-xs text-muted-foreground">
                {formatTimestamp(current.timestamp)}
              </span>
            </div>
            {renderAnalysisSection(current.analysis, "Current Analysis")}
          </div>
          
          <div className="space-y-4">
            <div className="flex items-center gap-2 pb-2 border-b">
              <Badge variant="outline">Compare</Badge>
              <span className="text-sm font-medium">
                Iteration {compare.iterationNumber}
              </span>
              <span className="text-xs text-muted-foreground">
                {formatTimestamp(compare.timestamp)}
              </span>
            </div>
            {renderAnalysisSection(compare.analysis, "Comparison Analysis")}
          </div>
        </div>
      </ScrollArea>
    )
  }

  if (iterations.length === 0) {
    return (
      <Card>
        <CardContent className="flex items-center justify-center h-32">
          <p className="text-muted-foreground">No iterations yet</p>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <History className="h-5 w-5 text-primary" />
            Iteration History
            <Badge variant="secondary" className="ml-2">
              {iterations.length} iterations
            </Badge>
          </CardTitle>
          
          <div className="flex items-center gap-2">
            {/* Navigation */}
            <div className="flex items-center gap-1">
              <Button
                variant="outline"
                size="sm"
                onClick={() => onSelectIteration(Math.max(0, currentIteration - 1))}
                disabled={currentIteration === 0}
                className="h-8 w-8 p-0"
              >
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <span className="text-sm px-2">
                {currentIteration + 1} of {iterations.length}
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onSelectIteration(Math.min(iterations.length - 1, currentIteration + 1))}
                disabled={currentIteration === iterations.length - 1}
                className="h-8 w-8 p-0"
              >
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </CardHeader>
      
      <CardContent>
        <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as 'timeline' | 'comparison')}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="timeline">Timeline</TabsTrigger>
            <TabsTrigger value="comparison">Comparison</TabsTrigger>
          </TabsList>
          
          <TabsContent value="timeline" className="mt-4">
            {renderTimeline()}
          </TabsContent>
          
          <TabsContent value="comparison" className="mt-4">
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <span className="text-sm">Compare with:</span>
                <select
                  value={compareWith || ''}
                  onChange={(e) => setCompareWith(e.target.value ? parseInt(e.target.value) : null)}
                  className="px-2 py-1 border rounded text-sm"
                >
                  <option value="">Select iteration...</option>
                  {iterations.map((iteration, index) => (
                    index !== currentIteration && (
                      <option key={iteration.id} value={index}>
                        Iteration {iteration.iterationNumber} - {formatTimestamp(iteration.timestamp)}
                      </option>
                    )
                  ))}
                </select>
              </div>
              {renderComparison()}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}



================================================
FILE: components/mode-toggle.tsx
================================================
"use client"

import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"

export function ModeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <Button variant="outline" size="sm" onClick={() => setTheme(theme === "light" ? "dark" : "light")}>
      <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}



================================================
FILE: components/multi-step-form.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Upload, X, ChevronLeft, ChevronRight } from "lucide-react"
import { cn } from "@/lib/utils"
// import removed: large provider toggle UI
import { AIProvider, AI_PROVIDERS } from "@/lib/ai-types"
import type { RequirementFormData } from "@/app/page"

interface MultiStepFormProps {
  formData: RequirementFormData
  onFormDataChange: (data: RequirementFormData) => void
  onSubmit: () => void
  isAnalyzing: boolean
  aiProvider?: AIProvider
  onAIProviderChange?: (provider: AIProvider) => void
}

const TASK_TYPES = [
  "New Code",
  "Extend Existing Code", 
  "Debug/Fix Bug",
  "Refactor Code"
]

const MOCK_FILES = [
  "components/auth/login.tsx",
  "lib/auth.ts",
  "pages/api/auth.ts",
  "utils/validation.ts",
  "types/user.ts"
]

const FORM_STEPS = [
  { id: 1, title: "Task & Goal", description: "Define what you want to build" },
  { id: 2, title: "Components", description: "Specify files and components" },
  { id: 3, title: "Input & Output", description: "Define expected data flow" },
  { id: 4, title: "References", description: "Add supporting materials" },
]

export function MultiStepForm({ 
  formData, 
  onFormDataChange, 
  onSubmit, 
  isAnalyzing, 
  aiProvider = AI_PROVIDERS.GEMINI,
  onAIProviderChange 
}: MultiStepFormProps) {
  const [currentStep, setCurrentStep] = useState(1)
  const [componentInput, setComponentInput] = useState("")

  const updateFormData = (updates: Partial<RequirementFormData>) => {
    onFormDataChange({ ...formData, ...updates })
  }

  const addComponent = (component: string) => {
    if (component && !formData.components?.includes(component)) {
      updateFormData({
        components: [...(formData.components || []), component]
      })
    }
    setComponentInput("")
  }

  const removeComponent = (component: string) => {
    updateFormData({
      components: formData.components?.filter(c => c !== component) || []
    })
  }

  const addReferenceUrl = () => {
    const url = prompt("Enter reference URL:")
    if (url) {
      updateFormData({
        referenceUrls: [...(formData.referenceUrls || []), url]
      })
    }
  }

  const removeReferenceUrl = (url: string) => {
    updateFormData({
      referenceUrls: formData.referenceUrls?.filter(u => u !== url) || []
    })
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || [])
    updateFormData({
      referenceFiles: [...(formData.referenceFiles || []), ...files]
    })
  }

  const removeFile = (index: number) => {
    const newFiles = [...(formData.referenceFiles || [])]
    newFiles.splice(index, 1)
    updateFormData({ referenceFiles: newFiles })
  }

  const canProceed = () => {
    switch (currentStep) {
      case 1:
        return formData.taskType && formData.goal
      case 2:
        return true // Components are optional
      case 3:
        return true // Inputs/outputs are optional
      case 4:
        return true // References are optional
      default:
        return false
    }
  }

  const handleNext = () => {
    if (currentStep < FORM_STEPS.length) {
      setCurrentStep(currentStep + 1)
    } else {
      onSubmit()
    }
  }

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium mb-2">
                Task Type *
              </label>
              <Select 
                value={formData.taskType || ""} 
                onValueChange={(value) => updateFormData({ taskType: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="What type of task is this?" />
                </SelectTrigger>
                <SelectContent>
                  {TASK_TYPES.map((type) => (
                    <SelectItem key={type} value={type}>
                      {type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                Goal *
              </label>
              <Textarea
                placeholder="Describe what you want to achieve (e.g., 'Implement user authentication with JWT tokens')"
                value={formData.goal || ""}
                onChange={(e) => updateFormData({ goal: e.target.value })}
                className="min-h-[100px]"
              />
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium mb-2">
                Components/Files Affected
              </label>
              <div className="space-y-3">
                <div className="flex gap-2">
                  <Input
                    placeholder="Type component/file name..."
                    value={componentInput}
                    onChange={(e) => setComponentInput(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === "Enter") {
                        addComponent(componentInput)
                      }
                    }}
                  />
                  <Button 
                    type="button" 
                    onClick={() => addComponent(componentInput)}
                    disabled={!componentInput}
                  >
                    Add
                  </Button>
                </div>
                
                <div className="text-sm text-muted-foreground">
                  Suggestions:
                </div>
                <div className="flex flex-wrap gap-2">
                  {MOCK_FILES.map((file) => (
                    <button
                      key={file}
                      onClick={() => addComponent(file)}
                      className="text-xs px-2 py-1 bg-muted hover:bg-muted/80 rounded-md transition-colors"
                    >
                      {file}
                    </button>
                  ))}
                </div>

                {formData.components && formData.components.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-3">
                    {formData.components.map((component) => (
                      <Badge key={component} variant="secondary" className="flex items-center gap-1">
                        {component}
                        <button
                          onClick={() => removeComponent(component)}
                          className="ml-1 hover:text-destructive"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium mb-2">
                Expected Inputs
              </label>
              <Textarea
                placeholder="Describe the inputs your solution should handle (e.g., 'user_id (integer), password (string)')"
                value={formData.inputs || ""}
                onChange={(e) => updateFormData({ inputs: e.target.value })}
                className="min-h-[80px]"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                Expected Outputs
              </label>
              <Textarea
                placeholder="Describe the expected outputs (e.g., 'JWT token on success, error message on failure')"
                value={formData.outputs || ""}
                onChange={(e) => updateFormData({ outputs: e.target.value })}
                className="min-h-[80px]"
              />
            </div>
          </div>
        )

      case 4:
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium mb-2">
                Reference Files
              </label>
              <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center">
                <Upload className="mx-auto h-8 w-8 text-muted-foreground mb-2" />
                <div className="text-sm text-muted-foreground mb-2">
                  Upload code files, images, or documents
                </div>
                <input
                  type="file"
                  multiple
                  accept=".py,.js,.ts,.jsx,.tsx,.md,.txt,.jpg,.png,.svg"
                  onChange={handleFileUpload}
                  className="hidden"
                  id="file-upload"
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => document.getElementById("file-upload")?.click()}
                >
                  Choose Files
                </Button>
              </div>

              {formData.referenceFiles && formData.referenceFiles.length > 0 && (
                <div className="space-y-2">
                  {formData.referenceFiles.map((file: File, index: number) => (
                    <div key={index} className="flex items-center justify-between p-2 bg-muted rounded">
                      <span className="text-sm">{file.name}</span>
                      <button
                        onClick={() => removeFile(index)}
                        className="text-destructive hover:text-destructive/80"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                Reference URLs
              </label>
              <Button
                type="button"
                variant="outline"
                onClick={addReferenceUrl}
                className="w-full"
              >
                Add Reference URL
              </Button>

              {formData.referenceUrls && formData.referenceUrls.length > 0 && (
                <div className="space-y-2 mt-3">
                  {formData.referenceUrls.map((url, index) => (
                    <div key={index} className="flex items-center justify-between p-2 bg-muted rounded">
                      <span className="text-sm truncate">{url}</span>
                      <button
                        onClick={() => removeReferenceUrl(url)}
                        className="text-destructive hover:text-destructive/80 ml-2"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )

      default:
        return null
    }
  }

  const currentStepData = FORM_STEPS[currentStep - 1]

  return (
    <div className="max-w-2xl mx-auto">
      {/* Progress Indicator */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          {FORM_STEPS.map((step, index) => (
            <div key={step.id} className="flex items-center">
              <div
                className={cn(
                  "w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors",
                  {
                    "bg-primary text-primary-foreground": step.id === currentStep,
                    "bg-primary/20 text-primary": step.id < currentStep,
                    "bg-muted text-muted-foreground": step.id > currentStep,
                  }
                )}
              >
                {step.id}
              </div>
              {index < FORM_STEPS.length - 1 && (
                <div
                  className={cn(
                    "w-12 h-0.5 mx-2 transition-colors",
                    {
                      "bg-primary": step.id < currentStep,
                      "bg-muted": step.id >= currentStep,
                    }
                  )}
                />
              )}
            </div>
          ))}
        </div>
        <div className="text-center">
          <h2 className="text-xl font-semibold">{currentStepData.title}</h2>
          <p className="text-muted-foreground text-sm">{currentStepData.description}</p>
        </div>
      </div>

      {/* Minimal LLM dropdown moved inside the form card below */}

      {/* Form Content */}
      <div className="bg-card rounded-lg border shadow-sm p-6 mb-6">
        {onAIProviderChange && (
          <div className="flex justify-end mb-4">
            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              <span>LLM:</span>
              <Select value={aiProvider} onValueChange={(v) => onAIProviderChange(v as AIProvider)}>
                <SelectTrigger className="h-8 w-[180px] px-2 text-xs">
                  <SelectValue placeholder="Choose model" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={AI_PROVIDERS.GEMINI}>Google Gemini — fast, concise</SelectItem>
                  <SelectItem value={AI_PROVIDERS.OPENAI}>OpenAI GPT-4 — accurate</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        )}
        <div className="transition-all duration-300 ease-in-out">
          {renderStep()}
        </div>
      </div>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button
          variant="outline"
          onClick={handlePrevious}
          disabled={currentStep === 1}
          className="flex items-center gap-2"
        >
          <ChevronLeft className="h-4 w-4" />
          Previous
        </Button>

        <Button
          onClick={handleNext}
          disabled={!canProceed() || isAnalyzing}
          className="flex items-center gap-2"
        >
          {currentStep === FORM_STEPS.length ? (
            isAnalyzing ? "Analyzing..." : "Analyze Requirement"
          ) : (
            <>
              Next
              <ChevronRight className="h-4 w-4" />
            </>
          )}
        </Button>
      </div>
    </div>
  )
}



================================================
FILE: components/prompts-panel.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { useToast } from "@/hooks/use-toast"
import { Copy, Download, Share, Code, Terminal, Zap, CheckCircle, Edit, Save, X, Sparkles } from "lucide-react"
import { ImprovePromptDialog } from "@/components/improve-prompt-dialog"
import type { GeneratedPrompts, EditedPrompts, Analysis } from "@/app/page"

interface PromptsPanelProps {
  prompts: GeneratedPrompts
  editedPrompts: EditedPrompts
  onEditPrompt: (ideType: keyof GeneratedPrompts, editedContent: string) => void
  onImprovePrompt: (ideType: keyof GeneratedPrompts, improvedPrompt: string) => void
  requirement?: string
  analysis?: Analysis | null
}

export function PromptsPanel({ 
  prompts, 
  editedPrompts, 
  onEditPrompt, 
  onImprovePrompt, 
  requirement, 
  analysis 
}: PromptsPanelProps) {
  const [copiedPrompt, setCopiedPrompt] = useState<string | null>(null)
  const [editMode, setEditMode] = useState<Record<string, boolean>>({})
  const [tempEditContent, setTempEditContent] = useState<Record<string, string>>({})
  const [improveDialogOpen, setImproveDialogOpen] = useState(false)
  const [currentImproveIde, setCurrentImproveIde] = useState<keyof GeneratedPrompts | null>(null)
  const { toast } = useToast()

  const getCurrentContent = (ide: keyof GeneratedPrompts): string => {
    return editedPrompts[ide] || prompts[ide]
  }

  const handleCopy = async (promptType: keyof GeneratedPrompts, content: string) => {
    try {
      await navigator.clipboard.writeText(content)
      setCopiedPrompt(promptType)
      toast({
        title: "Copied to clipboard",
        description: `${promptType.charAt(0).toUpperCase() + promptType.slice(1)} prompt copied successfully`,
      })
      setTimeout(() => setCopiedPrompt(null), 2000)
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Failed to copy prompt to clipboard",
        variant: "destructive",
      })
    }
  }

  const handleEditToggle = (ide: keyof GeneratedPrompts) => {
    const isEditing = editMode[ide]
    if (isEditing) {
      // Save the edit
      const newContent = tempEditContent[ide] || getCurrentContent(ide)
      onEditPrompt(ide, newContent)
      setEditMode(prev => ({ ...prev, [ide]: false }))
      toast({
        title: "Changes saved",
        description: `${ide.charAt(0).toUpperCase() + ide.slice(1)} prompt has been updated`,
      })
    } else {
      // Start editing
      setTempEditContent(prev => ({ ...prev, [ide]: getCurrentContent(ide) }))
      setEditMode(prev => ({ ...prev, [ide]: true }))
    }
  }

  const handleCancelEdit = (ide: keyof GeneratedPrompts) => {
    setEditMode(prev => ({ ...prev, [ide]: false }))
    setTempEditContent(prev => ({ ...prev, [ide]: getCurrentContent(ide) }))
  }

  const handleImproveClick = (ide: keyof GeneratedPrompts) => {
    setCurrentImproveIde(ide)
    setImproveDialogOpen(true)
  }

  const handlePromptImproved = (improvedPrompt: string) => {
    if (currentImproveIde) {
      onImprovePrompt(currentImproveIde, improvedPrompt)
    }
  }

  const handleExport = () => {
    const exportData = {
      timestamp: new Date().toISOString(),
      prompts,
      editedPrompts,
    }

    const blob = new Blob([JSON.stringify(exportData, null, 2)], {
      type: "application/json",
    })

    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `ide-prompts-${Date.now()}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast({
      title: "Export successful",
      description: "Prompts exported as JSON file",
    })
  }

  const getIdeIcon = (ide: string) => {
    switch (ide) {
      case "cursor":
        return <Code className="h-4 w-4" />
      case "copilot":
        return <Zap className="h-4 w-4" />
      case "warp":
        return <Terminal className="h-4 w-4" />
      case "windsurf":
        return <Code className="h-4 w-4" />
      default:
        return <Code className="h-4 w-4" />
    }
  }

  const getIdeColor = (ide: string) => {
    switch (ide) {
      case "cursor":
        return "bg-blue-500"
      case "copilot":
        return "bg-green-500"
      case "warp":
        return "bg-purple-500"
      case "windsurf":
        return "bg-orange-500"
      default:
        return "bg-gray-500"
    }
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <Zap className="h-5 w-5 text-primary" />
              Generated Prompts
            </CardTitle>
            <CardDescription>IDE-specific prompts optimized for each tool's capabilities</CardDescription>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" onClick={handleExport}>
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
            <Button variant="outline" size="sm">
              <Share className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="cursor" className="space-y-4">
          <TabsList className="grid w-full grid-cols-4">
            {Object.keys(prompts).map((ide) => (
              <TabsTrigger key={ide} value={ide} className="flex items-center gap-2">
                <div className={`w-2 h-2 rounded-full ${getIdeColor(ide)}`} />
                {ide.charAt(0).toUpperCase() + ide.slice(1)}
              </TabsTrigger>
            ))}
          </TabsList>

          {Object.entries(prompts).map(([ide, content]) => {
            const ideKey = ide as keyof GeneratedPrompts
            const currentContent = getCurrentContent(ideKey)
            const isEdited = !!editedPrompts[ideKey]
            const isEditing = editMode[ide]
            
            return (
              <TabsContent key={ide} value={ide} className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    {getIdeIcon(ide)}
                    <h3 className="font-medium">{ide.charAt(0).toUpperCase() + ide.slice(1)} Prompt</h3>
                    <Badge variant="secondary" className="text-xs">
                      {currentContent.length} chars
                    </Badge>
                    {isEdited && (
                      <Badge variant="outline" className="text-xs bg-yellow-50 text-yellow-700 border-yellow-200">
                        Modified
                      </Badge>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleImproveClick(ideKey)}
                      className="flex items-center gap-2"
                    >
                      <Sparkles className="h-4 w-4" />
                      Improve
                    </Button>
                    {isEditing ? (
                      <>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleCancelEdit(ideKey)}
                          className="flex items-center gap-2"
                        >
                          <X className="h-4 w-4" />
                          Cancel
                        </Button>
                        <Button
                          variant="default"
                          size="sm"
                          onClick={() => handleEditToggle(ideKey)}
                          className="flex items-center gap-2"
                        >
                          <Save className="h-4 w-4" />
                          Save
                        </Button>
                      </>
                    ) : (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEditToggle(ideKey)}
                        className="flex items-center gap-2"
                      >
                        <Edit className="h-4 w-4" />
                        Edit
                      </Button>
                    )}
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleCopy(ideKey, currentContent)}
                      className="flex items-center gap-2"
                    >
                      {copiedPrompt === ide ? (
                        <>
                          <CheckCircle className="h-4 w-4 text-green-600" />
                          Copied!
                        </>
                      ) : (
                        <>
                          <Copy className="h-4 w-4" />
                          Copy
                        </>
                      )}
                    </Button>
                  </div>
                </div>

                <Textarea 
                  value={isEditing ? (tempEditContent[ide] || currentContent) : currentContent}
                  onChange={(e) => isEditing && setTempEditContent(prev => ({ ...prev, [ide]: e.target.value }))}
                  readOnly={!isEditing}
                  className={`min-h-[300px] font-mono text-sm resize-none ${
                    isEditing ? 'border-primary' : ''
                  } ${
                    isEdited && !isEditing ? 'bg-yellow-50/50 border-yellow-200' : ''
                  }`}
                />
              </TabsContent>
            )
          })}
        </Tabs>
      </CardContent>
      
      <ImprovePromptDialog
        open={improveDialogOpen}
        onOpenChange={setImproveDialogOpen}
        originalPrompt={currentImproveIde ? getCurrentContent(currentImproveIde) : ""}
        ideType={currentImproveIde || "cursor"}
        onPromptImproved={handlePromptImproved}
        requirement={requirement}
        analysis={analysis}
      />
    </Card>
  )
}



================================================
FILE: components/requirement-input.tsx
================================================
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Separator } from "@/components/ui/separator"
import { Loader2, Sparkles, Upload, X, FileText, Image } from "lucide-react"

interface RequirementFormData {
  taskType?: string
  goal?: string
  components?: string[]
  inputs?: string
  outputs?: string
  referenceFiles?: File[]
  referenceUrls?: string[]
  // Legacy support
  requirement?: string
  context?: string
}

interface RequirementInputProps {
  value: string
  onChange: (value: string) => void
  context?: string
  onContextChange?: (value: string) => void
  onAnalyze: () => void
  isAnalyzing: boolean
  // New props for structured data
  formData?: RequirementFormData
  onFormDataChange?: (data: RequirementFormData) => void
}

export function RequirementInput({ 
  value, 
  onChange, 
  context = "", 
  onContextChange, 
  onAnalyze, 
  isAnalyzing,
  formData = {},
  onFormDataChange
}: RequirementInputProps) {
  const [charCount, setCharCount] = useState(0)
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([])
  const [uploadError, setUploadError] = useState<string | null>(null)
  const [componentInput, setComponentInput] = useState("")
  const [urlInput, setUrlInput] = useState("")

  // Mock file suggestions for autocomplete
  const mockFiles = [
    "components/auth/login.tsx",
    "pages/api/auth/route.ts", 
    "lib/database.ts",
    "utils/validation.ts",
    "types/user.ts",
    "hooks/useAuth.ts"
  ]

  const handleFormDataChange = (field: keyof RequirementFormData, value: any) => {
    const newData = { ...formData, [field]: value }
    onFormDataChange?.(newData)
    
    // Update character count based on all text fields
    const textContent = [
      newData.goal || "",
      newData.inputs || "",
      newData.outputs || "",
      ...(newData.components || []),
      ...(newData.referenceUrls || [])
    ].join(" ")
    setCharCount(textContent.length)
  }

  const handleFileUpload = async (files: FileList) => {
    setUploadError(null)
    const validFiles: File[] = []
    
    for (const file of Array.from(files)) {
      const lowerName = file.name.toLowerCase()
      const isCodeFile = [".py", ".js", ".ts", ".jsx", ".tsx", ".md", ".txt"].some(ext => lowerName.endsWith(ext))
      const isImageFile = [".jpg", ".jpeg", ".png", ".svg"].some(ext => lowerName.endsWith(ext))
      
      if (!isCodeFile && !isImageFile) {
        setUploadError(`Unsupported file type: ${file.name}`)
        continue
      }
      
      if (file.size > 10 * 1024 * 1024) {
        setUploadError(`File too large: ${file.name} (max 10MB)`)
        continue
      }
      
      validFiles.push(file)
    }
    
    if (validFiles.length > 0) {
      const newFiles = [...uploadedFiles, ...validFiles]
      setUploadedFiles(newFiles)
      handleFormDataChange("referenceFiles", newFiles)
    }
  }

  const removeFile = (index: number) => {
    const newFiles = uploadedFiles.filter((_, i) => i !== index)
    setUploadedFiles(newFiles)
    handleFormDataChange("referenceFiles", newFiles)
  }

  const addComponent = (component: string) => {
    if (component.trim()) {
      const currentComponents = formData.components || []
      if (!currentComponents.includes(component.trim())) {
        handleFormDataChange("components", [...currentComponents, component.trim()])
      }
      setComponentInput("")
    }
  }

  const removeComponent = (index: number) => {
    const currentComponents = formData.components || []
    handleFormDataChange("components", currentComponents.filter((_, i) => i !== index))
  }

  const addUrl = () => {
    if (urlInput.trim()) {
      const currentUrls = formData.referenceUrls || []
      if (!currentUrls.includes(urlInput.trim())) {
        handleFormDataChange("referenceUrls", [...currentUrls, urlInput.trim()])
      }
      setUrlInput("")
    }
  }

  const removeUrl = (index: number) => {
    const currentUrls = formData.referenceUrls || []
    handleFormDataChange("referenceUrls", currentUrls.filter((_, i) => i !== index))
  }

  const isValid = charCount >= 10 || (formData.goal && formData.goal.length >= 5)

  const getFileIcon = (fileName: string) => {
    const lowerName = fileName.toLowerCase()
    if ([".jpg", ".jpeg", ".png", ".svg"].some(ext => lowerName.endsWith(ext))) {
      return <Image className="h-4 w-4" />
    }
    return <FileText className="h-4 w-4" />
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-primary" />
          Structured Requirement Input
        </CardTitle>
        <CardDescription>
          Provide detailed information about your development task. All fields are optional but encouraged for better analysis.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Task Type */}
        <div className="space-y-2">
          <Label htmlFor="taskType">Task Type</Label>
          <Select value={formData.taskType || ""} onValueChange={(value) => handleFormDataChange("taskType", value)}>
            <SelectTrigger>
              <SelectValue placeholder="Select the type of development task" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="new-code">New Code</SelectItem>
              <SelectItem value="extend-existing">Extend Existing Code</SelectItem>
              <SelectItem value="debug-fix">Debug/Fix Bug</SelectItem>
              <SelectItem value="refactor">Refactor Code</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Goal */}
        <div className="space-y-2">
          <Label htmlFor="goal">Goal</Label>
          <Input
            id="goal"
            placeholder="e.g., Implement user authentication via OAuth"
            value={formData.goal || ""}
            onChange={(e) => handleFormDataChange("goal", e.target.value)}
            disabled={isAnalyzing}
          />
        </div>

        {/* Component/Files Affected */}
        <div className="space-y-2">
          <Label htmlFor="components">Component/File(s) Affected</Label>
          <div className="space-y-2">
            <div className="flex gap-2">
              <Input
                placeholder="Type file path or select from suggestions..."
                value={componentInput}
                onChange={(e) => setComponentInput(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && addComponent(componentInput)}
                disabled={isAnalyzing}
              />
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => addComponent(componentInput)}
                disabled={!componentInput.trim() || isAnalyzing}
              >
                Add
              </Button>
            </div>
            
            {/* File suggestions */}
            {componentInput && (
              <div className="flex flex-wrap gap-1">
                {mockFiles
                  .filter(file => file.toLowerCase().includes(componentInput.toLowerCase()))
                  .slice(0, 5)
                  .map(file => (
                    <Badge 
                      key={file}
                      variant="outline" 
                      className="cursor-pointer hover:bg-accent"
                      onClick={() => addComponent(file)}
                    >
                      {file}
                    </Badge>
                  ))}
              </div>
            )}
            
            {/* Selected components */}
            {formData.components && formData.components.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.components.map((component, index) => (
                  <Badge key={index} variant="secondary" className="flex items-center gap-1">
                    {component}
                    <X 
                      className="h-3 w-3 cursor-pointer hover:text-destructive" 
                      onClick={() => removeComponent(index)}
                    />
                  </Badge>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Inputs */}
        <div className="space-y-2">
          <Label htmlFor="inputs">Input(s)</Label>
          <Textarea
            id="inputs"
            placeholder="e.g., user_id (integer), password (string)"
            value={formData.inputs || ""}
            onChange={(e) => handleFormDataChange("inputs", e.target.value)}
            className="min-h-[80px] resize-none"
            disabled={isAnalyzing}
          />
        </div>

        {/* Expected Outputs */}
        <div className="space-y-2">
          <Label htmlFor="outputs">Expected Output(s)</Label>
          <Textarea
            id="outputs"
            placeholder="e.g., a JSON object with user details or an HTTP 401 error"
            value={formData.outputs || ""}
            onChange={(e) => handleFormDataChange("outputs", e.target.value)}
            className="min-h-[80px] resize-none"
            disabled={isAnalyzing}
          />
        </div>

        {/* Reference Code/Files */}
        <div className="space-y-4">
          <Label>Reference Code/Files</Label>
          
          {/* File Upload */}
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <Input
                type="file"
                accept=".py,.js,.ts,.jsx,.tsx,.md,.txt,.jpg,.jpeg,.png,.svg"
                multiple
                disabled={isAnalyzing}
                onChange={(e) => {
                  if (e.target.files) handleFileUpload(e.target.files)
                }}
              />
              <Upload className="h-4 w-4 text-muted-foreground" />
            </div>
            {uploadError && <p className="text-sm text-destructive">{uploadError}</p>}
          </div>

          {/* URL Input */}
          <div className="flex gap-2">
            <Input
              placeholder="Add documentation URL or reference link..."
              value={urlInput}
              onChange={(e) => setUrlInput(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && addUrl()}
              disabled={isAnalyzing}
            />
            <Button 
              type="button" 
              variant="outline" 
              onClick={addUrl}
              disabled={!urlInput.trim() || isAnalyzing}
            >
              Add URL
            </Button>
          </div>

          {/* Uploaded Files Display */}
          {uploadedFiles.length > 0 && (
            <div className="space-y-2">
              <p className="text-sm font-medium">Uploaded Files:</p>
              <div className="flex flex-wrap gap-2">
                {uploadedFiles.map((file, index) => (
                  <Badge key={index} variant="outline" className="flex items-center gap-2">
                    {getFileIcon(file.name)}
                    <span className="max-w-[200px] truncate">{file.name}</span>
                    <X 
                      className="h-3 w-3 cursor-pointer hover:text-destructive" 
                      onClick={() => removeFile(index)}
                    />
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Reference URLs Display */}
          {formData.referenceUrls && formData.referenceUrls.length > 0 && (
            <div className="space-y-2">
              <p className="text-sm font-medium">Reference URLs:</p>
              <div className="space-y-1">
                {formData.referenceUrls.map((url, index) => (
                  <div key={index} className="flex items-center gap-2 p-2 border rounded">
                    <span className="flex-1 text-sm truncate">{url}</span>
                    <X 
                      className="h-4 w-4 cursor-pointer hover:text-destructive" 
                      onClick={() => removeUrl(index)}
                    />
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        <Separator />

        {/* Legacy Support - Free Text Input */}
        <div className="space-y-2">
          <Label htmlFor="freeText">Additional Details (Optional)</Label>
          <Textarea
            id="freeText"
            placeholder="Any additional context, requirements, or specific details..."
            value={value}
            onChange={(e) => onChange(e.target.value)}
            className="min-h-[100px] resize-none"
            disabled={isAnalyzing}
          />
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              {charCount < 10 && charCount > 0 && <Badge variant="destructive">Too short</Badge>}
              {isValid && <Badge variant="secondary">Ready to analyze</Badge>}
            </div>
            <span>{charCount} characters</span>
          </div>
        </div>

        <Button onClick={onAnalyze} disabled={!isValid || isAnalyzing} className="w-full" size="lg">
          {isAnalyzing ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Analyzing Requirement...
            </>
          ) : (
            <>
              <Sparkles className="mr-2 h-4 w-4" />
              Analyze Requirement
            </>
          )}
        </Button>
      </CardContent>
    </Card>
  )
}



================================================
FILE: components/theme-provider.tsx
================================================
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



================================================
FILE: components/top-navigation.tsx
================================================
"use client"

import { useRouter } from "next/navigation"
import { cn } from "@/lib/utils"

interface TopNavigationProps {
  currentStep: "requirement" | "analyse" | "prompt"
}

const NAVIGATION_STEPS = [
  { key: "requirement", label: "Requirement", path: "/" },
  { key: "analyse", label: "Analyse", path: "/analyse" },
  { key: "prompt", label: "Prompt", path: "/prompts" },
] as const

export function TopNavigation({ currentStep }: TopNavigationProps) {
  const router = useRouter()

  const getStepIndex = (step: string) => {
    return NAVIGATION_STEPS.findIndex(s => s.key === step)
  }

  const currentIndex = getStepIndex(currentStep)

  const handleStepClick = (step: typeof NAVIGATION_STEPS[number]) => {
    const stepIndex = getStepIndex(step.key)
    
    // Only allow navigation to completed steps or current step
    if (stepIndex <= currentIndex) {
      router.push(step.path)
    }
  }

  return (
    <div className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container mx-auto px-4 py-4">
        <div className="flex items-center justify-between">
          {/* App Name */}
          <div className="flex items-center space-x-4">
            <h1 className="text-xl font-bold">AI Prompt Architect</h1>
          </div>

          {/* Navigation Pills */}
          <div className="flex items-center space-x-2 bg-muted p-1 rounded-full">
            {NAVIGATION_STEPS.map((step, index) => {
              const isActive = step.key === currentStep
              const isCompleted = index < currentIndex
              const isAccessible = index <= currentIndex

              return (
                <button
                  key={step.key}
                  onClick={() => handleStepClick(step)}
                  disabled={!isAccessible}
                  className={cn(
                    "px-4 py-2 rounded-full text-sm font-medium transition-all duration-200",
                    "focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
                    {
                      // Active step (current)
                      "bg-primary text-primary-foreground shadow-sm": isActive,
                      // Completed steps
                      "bg-background text-foreground hover:bg-background/80": isCompleted && !isActive,
                      // Future steps (disabled)
                      "text-muted-foreground cursor-not-allowed": !isAccessible,
                      // Accessible but not active
                      "text-muted-foreground hover:text-foreground hover:bg-background/50": isAccessible && !isActive && !isCompleted,
                    }
                  )}
                >
                  {step.label}
                </button>
              )
            })}
          </div>

          {/* Progress Indicator */}
          <div className="flex items-center space-x-2 text-sm text-muted-foreground">
            <span>Step {currentIndex + 1} of {NAVIGATION_STEPS.length}</span>
          </div>
        </div>
      </div>
    </div>
  )
}



================================================
FILE: components/ui/accordion.tsx
================================================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



================================================
FILE: components/ui/alert-dialog.tsx
================================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================
FILE: components/ui/alert.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }



================================================
FILE: components/ui/aspect-ratio.tsx
================================================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

function AspectRatio({
  ...props
}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />
}

export { AspectRatio }



================================================
FILE: components/ui/avatar.tsx
================================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }



================================================
FILE: components/ui/badge.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }



================================================
FILE: components/ui/breadcrumb.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

function Breadcrumb({ ...props }: React.ComponentProps<"nav">) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />
}

function BreadcrumbList({ className, ...props }: React.ComponentProps<"ol">) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props}
    />
  )
}

function BreadcrumbItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props}
    />
  )
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
}) {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      data-slot="breadcrumb-link"
      className={cn("hover:text-foreground transition-colors", className)}
      {...props}
    />
  )
}

function BreadcrumbPage({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("text-foreground font-normal", className)}
      {...props}
    />
  )
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:size-3.5", className)}
      {...props}
    >
      {children ?? <ChevronRight />}
    </li>
  )
}

function BreadcrumbEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontal className="size-4" />
      <span className="sr-only">More</span>
    </span>
  )
}

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



================================================
FILE: components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



================================================
FILE: components/ui/calendar.tsx
================================================
"use client"

import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          "absolute bg-popover inset-0 opacity-0",
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }



================================================
FILE: components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}



================================================
FILE: components/ui/carousel.tsx
================================================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



================================================
FILE: components/ui/chart.tsx
================================================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<"div"> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >["children"]
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
  React.ComponentProps<"div"> & {
    hideLabel?: boolean
    hideIndicator?: boolean
    indicator?: "line" | "dot" | "dashed"
    nameKey?: string
    labelKey?: string
  }) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }

    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label

    if (labelFormatter) {
      return (
        <div className={cn("font-medium", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }

    if (!value) {
      return null
    }

    return <div className={cn("font-medium", labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== "dot"

  return (
    <div
      className={cn(
        "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                indicator === "dot" && "items-center"
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          "shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)",
                          {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent":
                              indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          }
                        )}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center"
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}

const ChartLegend = RechartsPrimitive.Legend

function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey,
}: React.ComponentProps<"div"> &
  Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
    hideIcon?: boolean
    nameKey?: string
  }) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



================================================
FILE: components/ui/checkbox.tsx
================================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }



================================================
FILE: components/ui/collapsible.tsx
================================================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



================================================
FILE: components/ui/command.tsx
================================================
"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn("overflow-hidden p-0", className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================
FILE: components/ui/context-menu.tsx
================================================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />
}

function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  )
}

function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  )
}

function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  )
}

function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />
}

function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  )
}

function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  )
}

function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
}

function ContextMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
}

function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
}

function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        "text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



================================================
FILE: components/ui/dialog.tsx
================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}



================================================
FILE: components/ui/drawer.tsx
================================================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-header"
      className={cn(
        "flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left",
        className
      )}
      {...props}
    />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



================================================
FILE: components/ui/dropdown-menu.tsx
================================================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}



================================================
FILE: components/ui/form.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



================================================
FILE: components/ui/hover-card.tsx
================================================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

function HoverCard({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {
  return <HoverCardPrimitive.Root data-slot="hover-card" {...props} />
}

function HoverCardTrigger({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {
  return (
    <HoverCardPrimitive.Trigger data-slot="hover-card-trigger" {...props} />
  )
}

function HoverCardContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {
  return (
    <HoverCardPrimitive.Portal data-slot="hover-card-portal">
      <HoverCardPrimitive.Content
        data-slot="hover-card-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </HoverCardPrimitive.Portal>
  )
}

export { HoverCard, HoverCardTrigger, HoverCardContent }



================================================
FILE: components/ui/input-otp.tsx
================================================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { MinusIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        "flex items-center gap-2 has-disabled:opacity-50",
        containerClassName
      )}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  )
}

function InputOTPGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn("flex items-center", className)}
      {...props}
    />
  )
}

function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<"div"> & {
  index: number
}) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        "data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  )
}

function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  )
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



================================================
FILE: components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }



================================================
FILE: components/ui/label.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }



================================================
FILE: components/ui/menubar.tsx
================================================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Menubar({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Root>) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        "bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs",
        className
      )}
      {...props}
    />
  )
}

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return (
    <MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />
  )
}

function MenubarTrigger({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none",
        className
      )}
      {...props}
    />
  )
}

function MenubarContent({
  className,
  align = "start",
  alignOffset = -4,
  sideOffset = 8,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Content>) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </MenubarPortal>
  )
}

function MenubarItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  )
}

function MenubarRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  )
}

function MenubarLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function MenubarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function MenubarShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  )
}

function MenubarSubContent({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
}



================================================
FILE: components/ui/navigation-menu.tsx
================================================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  )
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        "group flex flex-1 list-none items-center justify-center gap-1",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn("relative", className)}
      {...props}
    />
  )
}

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1"
)

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}
    >
      {children}{" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  )
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        "absolute top-full left-0 isolate z-50 flex justify-center"
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
          className
        )}
        {...props}
      />
    </div>
  )
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  )
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
}



================================================
FILE: components/ui/pagination.tsx
================================================
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}

function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}

function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">

function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}

function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}

function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}

function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}



================================================
FILE: components/ui/popover.tsx
================================================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



================================================
FILE: components/ui/progress.tsx
================================================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }



================================================
FILE: components/ui/radio-group.tsx
================================================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }



================================================
FILE: components/ui/resizable.tsx
================================================
"use client"

import * as React from "react"
import { GripVerticalIcon } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className
      )}
      {...props}
    />
  )
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



================================================
FILE: components/ui/scroll-area.tsx
================================================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



================================================
FILE: components/ui/select.tsx
================================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}



================================================
FILE: components/ui/separator.tsx
================================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }



================================================
FILE: components/ui/sheet.tsx
================================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================
FILE: components/ui/sidebar.tsx
================================================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, VariantProps } from "class-variance-authority"
import { PanelLeftIcon } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContextProps = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  defaultOpen?: boolean
  open?: boolean
  onOpenChange?: (open: boolean) => void
}) {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value
      if (setOpenProp) {
        setOpenProp(openState)
      } else {
        _setOpen(openState)
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
    },
    [setOpenProp, open]
  )

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)
  }, [isMobile, setOpen, setOpenMobile])

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [toggleSidebar])

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed"

  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
  )

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            "group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full",
            className
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  )
}

function Sidebar({
  side = "left",
  variant = "sidebar",
  collapsible = "offcanvas",
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & {
  side?: "left" | "right"
  variant?: "sidebar" | "floating" | "inset"
  collapsible?: "offcanvas" | "icon" | "none"
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === "none") {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          "bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col",
          className
        )}
        {...props}
      >
        {children}
      </div>
    )
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    )
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)"
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
            : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  )
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("size-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
}

function SidebarRail({ className, ...props }: React.ComponentProps<"button">) {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex",
        "in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
}

function SidebarInset({ className, ...props }: React.ComponentProps<"main">) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        "bg-background relative flex w-full flex-1 flex-col",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2",
        className
      )}
      {...props}
    />
  )
}

function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn("bg-background h-8 w-full shadow-none", className)}
      {...props}
    />
  )
}

function SidebarHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
}

function SidebarFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
}

function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props}
    />
  )
}

function SidebarContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"div"> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn("w-full text-sm", className)}
      {...props}
    />
  )
}

function SidebarMenu({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn("flex w-full min-w-0 flex-col gap-1", className)}
      {...props}
    />
  )
}

function SidebarMenuItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn("group/menu-item relative", className)}
      {...props}
    />
  )
}

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = "default",
  size = "default",
  tooltip,
  className,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean
  isActive?: boolean
  tooltip?: string | React.ComponentProps<typeof TooltipContent>
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : "button"
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip}
      />
    </Tooltip>
  )
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<"button"> & {
  asChild?: boolean
  showOnHover?: boolean
}) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 md:after:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className
      )}
      {...props}
    />
  )
}

function SidebarMenuBadge({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<"div"> & {
  showIcon?: boolean
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

function SidebarMenuSubItem({
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn("group/menu-sub-item relative", className)}
      {...props}
    />
  )
}

function SidebarMenuSubButton({
  asChild = false,
  size = "md",
  isActive = false,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
  size?: "sm" | "md"
  isActive?: boolean
}) {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



================================================
FILE: components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }



================================================
FILE: components/ui/slider.tsx
================================================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }



================================================
FILE: components/ui/sonner.tsx
================================================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }



================================================
FILE: components/ui/switch.tsx
================================================
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }



================================================
FILE: components/ui/table.tsx
================================================
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
FILE: components/ui/tabs.tsx
================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }



================================================
FILE: components/ui/toast.tsx
================================================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================
FILE: components/ui/toaster.tsx
================================================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



================================================
FILE: components/ui/toggle-group.tsx
================================================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        "group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs",
        className
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        "min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
}

export { ToggleGroup, ToggleGroupItem }



================================================
FILE: components/ui/toggle.tsx
================================================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Toggle, toggleVariants }



================================================
FILE: components/ui/tooltip.tsx
================================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



================================================
FILE: components/ui/use-mobile.tsx
================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



================================================
FILE: components/ui/use-toast.ts
================================================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



================================================
FILE: hooks/use-iterations.ts
================================================
import { useState, useCallback, useEffect } from "react"
import type { Analysis } from "@/app/page"
import type { AnalysisIteration } from "@/components/iteration-display"

interface UseIterationsProps {
  initialAnalysis?: Analysis
  requirement: string
  formData?: any
  aiProvider?: string
}

interface UseIterationsReturn {
  iterations: AnalysisIteration[]
  currentIteration: number
  isIterating: boolean
  userFeedback: string
  setUserFeedback: (feedback: string) => void
  createIteration: (feedback?: string) => Promise<boolean>
  selectIteration: (index: number) => void
  markSatisfied: () => void
  getCurrentAnalysis: () => Analysis | null
  hasUnsavedChanges: boolean
  saveCurrentIteration: (analysis: Analysis) => void
  canIterate: () => boolean
  getIterationStats: () => {
    total: number
    satisfied: number
    current: number
  }
}

export function useIterations({ 
  initialAnalysis, 
  requirement, 
  formData,
  aiProvider 
}: UseIterationsProps): UseIterationsReturn {
  const [iterations, setIterations] = useState<AnalysisIteration[]>([])
  const [currentIteration, setCurrentIteration] = useState(0)
  const [isIterating, setIsIterating] = useState(false)
  const [userFeedback, setUserFeedback] = useState("")
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)

  // Initialize iterations from localStorage or create first iteration
  useEffect(() => {
    const savedIterations = localStorage.getItem("currentIterations")
    const savedCurrentIteration = localStorage.getItem("currentIterationIndex")

    if (savedIterations) {
      const parsedIterations = JSON.parse(savedIterations)
      setIterations(parsedIterations)
      
      if (savedCurrentIteration) {
        setCurrentIteration(parseInt(savedCurrentIteration))
      }
    } else if (initialAnalysis) {
      // Create first iteration
      const firstIteration: AnalysisIteration = {
        id: `iter_${Date.now()}`,
        timestamp: new Date(),
        analysis: initialAnalysis,
        iterationNumber: 1,
        isUserSatisfied: false
      }
      
      setIterations([firstIteration])
      setCurrentIteration(0)
      
      // Save to localStorage
      localStorage.setItem("currentIterations", JSON.stringify([firstIteration]))
      localStorage.setItem("currentIterationIndex", "0")
    }
  }, [initialAnalysis])

  // Save iterations to localStorage whenever they change
  useEffect(() => {
    if (iterations.length > 0) {
      try {
        localStorage.setItem("currentIterations", JSON.stringify(iterations))
        localStorage.setItem("currentIterationIndex", currentIteration.toString())
      } catch (storageError) {
        console.warn("Failed to save to localStorage:", storageError)
      }
    }
  }, [iterations, currentIteration])

  const createIteration = useCallback(async (feedback?: string): Promise<boolean> => {
    if (!iterations[currentIteration] || isIterating) return false
    
    setIsIterating(true)
    const feedbackToUse = feedback || userFeedback.trim()
    
    try {
      const currentIterationData = iterations[currentIteration]
      const userEdits = currentIterationData.userEdits || undefined
      
      const response = await fetch("/api/analyze", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          requirement,
          formData,
          provider: aiProvider || "gemini",
          iterationData: {
            previousAnalysis: currentIterationData.analysis,
            userEdits,
            userFeedback: feedbackToUse || undefined,
            iterationNumber: iterations.length + 1,
          },
        }),
      })

      if (response.ok) {
        const { data: newAnalysis } = await response.json()
        
        const newIteration: AnalysisIteration = {
          id: `iter_${Date.now()}`,
          timestamp: new Date(),
          analysis: newAnalysis,
          userFeedback: feedbackToUse || undefined,
          iterationNumber: iterations.length + 1,
          isUserSatisfied: false
        }
        
        const updatedIterations = [...iterations, newIteration]
        const newIterationIndex = updatedIterations.length - 1
        
        setIterations(updatedIterations)
        setCurrentIteration(newIterationIndex)
        setUserFeedback("")
        setHasUnsavedChanges(false)
        
        // Improved localStorage error handling
        try {
          localStorage.setItem("currentAnalysis", JSON.stringify(newAnalysis))
          localStorage.setItem("currentIterations", JSON.stringify(updatedIterations))
        } catch (storageError) {
          console.warn("Failed to save to localStorage:", storageError)
          // Continue execution - don't fail the entire operation
        }
        
        return true
      } else {
        const errorText = await response.text()
        console.error("Failed to create iteration:", errorText)
        return false
      }
    } catch (error) {
      console.error("Error creating iteration:", error)
      return false
    } finally {
      setIsIterating(false)
    }
  }, [iterations, currentIteration, isIterating, userFeedback, requirement, formData, aiProvider])

  const selectIteration = useCallback((index: number) => {
    if (index >= 0 && index < iterations.length && index !== currentIteration) {
      setCurrentIteration(index)
      setHasUnsavedChanges(false)
      
      // Update current analysis in localStorage
      try {
        localStorage.setItem("currentAnalysis", JSON.stringify(iterations[index].analysis))
      } catch (storageError) {
        console.warn("Failed to save to localStorage:", storageError)
      }
    }
  }, [iterations, currentIteration])

  const markSatisfied = useCallback(() => {
    if (iterations[currentIteration]) {
      const updatedIterations = [...iterations]
      updatedIterations[currentIteration] = {
        ...updatedIterations[currentIteration],
        isUserSatisfied: true
      }
      setIterations(updatedIterations)
    }
  }, [iterations, currentIteration])

  const getCurrentAnalysis = useCallback((): Analysis | null => {
    return iterations[currentIteration]?.analysis || null
  }, [iterations, currentIteration])

  const saveCurrentIteration = useCallback((analysis: Analysis) => {
    if (iterations[currentIteration]) {
      const updatedIterations = [...iterations]
      updatedIterations[currentIteration] = {
        ...updatedIterations[currentIteration],
        analysis,
        timestamp: new Date(), // Update timestamp to reflect the edit
        userEdits: analysis // Mark as user-edited
      }
      setIterations(updatedIterations)
      setHasUnsavedChanges(false)
      
      // Update both current analysis and iterations in localStorage immediately
      try {
        localStorage.setItem("currentAnalysis", JSON.stringify(analysis))
        localStorage.setItem("currentIterations", JSON.stringify(updatedIterations))
        localStorage.setItem("currentIterationIndex", currentIteration.toString())
      } catch (storageError) {
        console.warn("Failed to save to localStorage:", storageError)
      }
    }
  }, [iterations, currentIteration])

  const canIterate = useCallback((): boolean => {
    const current = iterations[currentIteration]
    return !!(current && !current.isUserSatisfied && !isIterating)
  }, [iterations, currentIteration, isIterating])

  const getIterationStats = useCallback(() => {
    return {
      total: iterations.length,
      satisfied: iterations.filter(iter => iter.isUserSatisfied).length,
      current: currentIteration + 1
    }
  }, [iterations, currentIteration])

  return {
    iterations,
    currentIteration,
    isIterating,
    userFeedback,
    setUserFeedback,
    createIteration,
    selectIteration,
    markSatisfied,
    getCurrentAnalysis,
    hasUnsavedChanges,
    saveCurrentIteration,
    canIterate,
    getIterationStats
  }
}



================================================
FILE: hooks/use-mobile.ts
================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



================================================
FILE: hooks/use-toast.ts
================================================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



================================================
FILE: landing-page/globals.css
================================================
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(0.98 0 0);
  --foreground: oklch(0.298 0 0);
  --card: oklch(0.98 0 0);
  --card-foreground: oklch(0.298 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.298 0 0);
  --primary: oklch(0.548 0.194 200.096);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.708 0.222 162.028);
  --secondary-foreground: oklch(1 0 0);
  --muted: oklch(0.98 0 0);
  --muted-foreground: oklch(0.298 0 0);
  --accent: oklch(0.708 0.222 162.028);
  --accent-foreground: oklch(1 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.922 0 0);
  --input: oklch(0.98 0 0);
  --ring: oklch(0.548 0.194 200.096);
  --chart-1: oklch(0.646 0.222 162.028);
  --chart-2: oklch(0.708 0.222 162.028);
  --chart-3: oklch(0.548 0.194 200.096);
  --chart-4: oklch(0.577 0.245 27.325);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.5rem;
  --sidebar: oklch(0.98 0 0);
  --sidebar-foreground: oklch(0.298 0 0);
  --sidebar-primary: oklch(1 0 0);
  --sidebar-primary-foreground: oklch(0.298 0 0);
  --sidebar-accent: oklch(0.708 0.222 162.028);
  --sidebar-accent-foreground: oklch(1 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.548 0.194 200.096);
}

.dark {
  /* Updated dark theme colors for glassmorphism design */
  --background: oklch(0.12 0 0);
  --foreground: oklch(0.98 0 0);
  --card: oklch(0.15 0 0 / 0.8);
  --card-foreground: oklch(0.98 0 0);
  --popover: oklch(0.15 0 0 / 0.9);
  --popover-foreground: oklch(0.98 0 0);
  --primary: oklch(0.65 0.2 280);
  --primary-foreground: oklch(0.98 0 0);
  --secondary: oklch(0.45 0 0);
  --secondary-foreground: oklch(0.98 0 0);
  --muted: oklch(0.3 0 0);
  --muted-foreground: oklch(0.7 0 0);
  --accent: oklch(0.65 0.2 280);
  --accent-foreground: oklch(0.98 0 0);
  --destructive: oklch(0.6 0.25 25);
  --destructive-foreground: oklch(0.98 0 0);
  --border: oklch(0.25 0 0 / 0.3);
  --input: oklch(0.15 0 0 / 0.5);
  --ring: oklch(0.65 0.2 280 / 0.5);
  --chart-1: oklch(0.55 0.25 260);
  --chart-2: oklch(0.6 0.2 220);
  --chart-3: oklch(0.65 0.2 140);
  --chart-4: oklch(0.7 0.2 60);
  --chart-5: oklch(0.6 0.25 25);
  --sidebar: oklch(0.12 0 0);
  --sidebar-foreground: oklch(0.98 0 0);
  --sidebar-primary: oklch(0.65 0.2 280);
  --sidebar-primary-foreground: oklch(0.98 0 0);
  --sidebar-accent: oklch(0.45 0 0);
  --sidebar-accent-foreground: oklch(0.98 0 0);
  --sidebar-border: oklch(0.25 0 0 / 0.3);
  --sidebar-ring: oklch(0.65 0.2 280 / 0.5);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .glass {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .glass-dark {
    background: rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .gradient-bg {
    background: radial-gradient(ellipse at center, rgba(139, 92, 246, 0.15) 0%, transparent 70%);
  }
}



================================================
FILE: landing-page/landing.tsx
================================================
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowRight, Sparkles, Code, Zap, Users, Shield, Rocket, Moon, Sun } from "lucide-react"
import Link from "next/link"
import { useTheme } from "next-themes"

export default function LandingPage() {
  const { theme, setTheme } = useTheme()

  return (
    <div className="min-h-screen bg-background dark:bg-gradient-to-br dark:from-background dark:via-background dark:to-purple-950/20">
      {/* Glassmorphism Navigation */}
      <nav className="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 w-full max-w-4xl px-4">
        <div className="glass dark:glass-dark rounded-full px-6 py-3 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center">
              <Sparkles className="w-4 h-4 text-primary-foreground" />
            </div>
            <span className="font-bold text-lg">AI Prompt Architect</span>
          </div>
          <div className="flex items-center gap-4">
            <Link href="/app" className="text-sm hover:text-primary transition-colors">
              Features
            </Link>
            <Link href="/app" className="text-sm hover:text-primary transition-colors">
              Pricing
            </Link>
            <button
              onClick={() => setTheme(theme === "light" ? "dark" : "light")}
              className="p-2 rounded-full hover:bg-white/10 dark:hover:bg-black/10 transition-colors relative"
              aria-label="Toggle theme"
            >
              <Sun className="h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <Moon className="absolute top-2 left-2 h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
            </button>
            <Button size="sm" className="rounded-full">
              Get Started
            </Button>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="relative min-h-screen flex items-center justify-center px-4 overflow-hidden">
        {/* Background Effects */}
        <div className="absolute inset-0 gradient-bg" />
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-primary/10 rounded-full blur-3xl" />
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-accent/10 rounded-full blur-3xl" />

        {/* Curved Light Element */}
        <div className="absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-primary/20 to-transparent rounded-t-[100%] transform scale-x-150" />

        <div className="relative z-10 text-center max-w-4xl mx-auto">
          <Badge variant="secondary" className="mb-6 glass dark:glass-dark border-0">
            <Sparkles className="w-3 h-3 mr-1" />
            Powered by Advanced AI
          </Badge>

          <h1 className="text-5xl md:text-7xl font-bold mb-6 text-balance">
            Transform Requirements into
            <span className="text-primary block">Perfect AI Prompts</span>
          </h1>

          <p className="text-xl md:text-2xl text-muted-foreground mb-8 text-pretty max-w-2xl mx-auto leading-relaxed">
            Generate structured, IDE-optimized prompts from your development requirements. Boost productivity with
            AI-powered analysis and multi-platform compatibility.
          </p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-12">
            <Link href="/app">
              <Button size="lg" className="rounded-full px-8 py-6 text-lg group">
                Start Building
                <ArrowRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform" />
              </Button>
            </Link>
            <Button
              variant="outline"
              size="lg"
              className="rounded-full px-8 py-6 text-lg glass dark:glass-dark border-0 bg-transparent"
            >
              Watch Demo
            </Button>
          </div>

          {/* Email Signup */}
          <div className="glass dark:glass-dark rounded-2xl p-6 max-w-md mx-auto">
            <div className="flex gap-2">
              <input
                type="email"
                placeholder="Enter your email"
                className="flex-1 bg-input border-0 rounded-lg px-4 py-3 text-sm focus:ring-2 focus:ring-primary/50 outline-none"
              />
              <Button className="rounded-lg px-6">Join Waitlist</Button>
            </div>
            <p className="text-xs text-muted-foreground mt-2">We'll notify you when we launch.</p>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-24 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold mb-6">
              Everything you need to
              <span className="text-primary block">supercharge development</span>
            </h2>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto text-pretty">
              From requirement analysis to IDE-specific prompts, we've got every step of your workflow covered.
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[
              {
                icon: <Code className="w-8 h-8" />,
                title: "Multi-Step Analysis",
                description:
                  "Break down complex requirements into structured, actionable components with AI-powered analysis.",
              },
              {
                icon: <Zap className="w-8 h-8" />,
                title: "IDE Optimization",
                description:
                  "Generate prompts tailored for Cursor, Copilot, Warp, and Windsurf with platform-specific formatting.",
              },
              {
                icon: <Users className="w-8 h-8" />,
                title: "Team Collaboration",
                description:
                  "Share and iterate on prompts with your team. Keep everyone aligned on project requirements.",
              },
              {
                icon: <Shield className="w-8 h-8" />,
                title: "Smart Validation",
                description: "Automatic validation of requirements with edge case detection and assumption tracking.",
              },
              {
                icon: <Rocket className="w-8 h-8" />,
                title: "Instant Generation",
                description: "Transform requirements into production-ready prompts in seconds, not hours.",
              },
              {
                icon: <Sparkles className="w-8 h-8" />,
                title: "AI-Powered Insights",
                description: "Get intelligent suggestions for improving your requirements and development approach.",
              },
            ].map((feature, index) => (
              <Card
                key={index}
                className="glass dark:glass-dark border-0 hover:scale-105 transition-transform duration-300"
              >
                <CardContent className="p-6">
                  <div className="text-primary mb-4">{feature.icon}</div>
                  <h3 className="text-xl font-semibold mb-3">{feature.title}</h3>
                  <p className="text-muted-foreground leading-relaxed">{feature.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-24 px-4">
        <div className="max-w-4xl mx-auto text-center">
          <div className="glass dark:glass-dark rounded-3xl p-12">
            <h2 className="text-4xl md:text-5xl font-bold mb-6">
              Ready to transform your
              <span className="text-primary block">development workflow?</span>
            </h2>
            <p className="text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
              Join thousands of developers who are already using AI Prompt Architect to streamline their coding process.
            </p>
            <Link href="/app">
              <Button size="lg" className="rounded-full px-12 py-6 text-lg">
                Get Started Free
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-12 px-4 border-t border-border/50">
        <div className="max-w-6xl mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-center gap-6">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center">
                <Sparkles className="w-4 h-4 text-primary-foreground" />
              </div>
              <span className="font-bold text-lg">AI Prompt Architect</span>
            </div>
            <div className="flex gap-6 text-sm text-muted-foreground">
              <Link href="#" className="hover:text-primary transition-colors">
                Privacy
              </Link>
              <Link href="#" className="hover:text-primary transition-colors">
                Terms
              </Link>
              <Link href="#" className="hover:text-primary transition-colors">
                Support
              </Link>
            </div>
          </div>
          <div className="text-center text-sm text-muted-foreground mt-8">
            2024 AI Prompt Architect. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  )
}



================================================
FILE: landing-page/page (1).tsx
================================================
"use client"

import { useState } from "react"
import { Header } from "@/components/header"
import { RequirementInput } from "@/components/requirement-input"
import { AnalysisModal } from "@/components/analysis-modal"
import { PromptsPage } from "@/components/prompts-page"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import type { Analysis, GeneratedPrompts, Session } from "@/types"

export default function AppPage() {
  const [requirement, setRequirement] = useState("")
  const [analysis, setAnalysis] = useState<Analysis | null>(null)
  const [prompts, setPrompts] = useState<GeneratedPrompts | null>(null)
  const [sessions, setSessions] = useState<Session[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [isGenerating, setIsGenerating] = useState(false)
  const [currentPage, setCurrentPage] = useState<"requirement" | "analyse" | "prompt">("requirement")
  const [showAnalysisModal, setShowAnalysisModal] = useState(false)

  const handleAnalyze = async () => {
    if (!requirement.trim()) return

    setIsAnalyzing(true)

    setTimeout(() => {
      const mockAnalysis: Analysis = {
        goals: [
          "Implement OAuth authentication",
          "Support Google and GitHub providers",
          "Secure user session management",
        ],
        constraints: [
          "Must use secure cookie storage",
          "Implement proper error handling",
          "Follow OAuth 2.0 standards",
        ],
        dependencies: [
          "OAuth provider configuration",
          "Session management library",
          "Environment variables for client secrets",
        ],
        edgeCases: [
          "User denies OAuth permission",
          "Network timeout during authentication",
          "Invalid or expired tokens",
        ],
        acceptanceCriteria: [
          "Users can sign in with Google",
          "Users can sign in with GitHub",
          "Sessions persist across browser restarts",
          "Proper error messages for failed authentication",
        ],
        questions: [
          {
            id: "1",
            text: "Which framework are you using (Next.js, React, etc.)?",
            priority: "critical",
          },
          {
            id: "2",
            text: "What user roles or permissions are needed?",
            priority: "important",
          },
          {
            id: "3",
            text: "Should sign-up be restricted to specific domains?",
            priority: "nice-to-have",
          },
        ],
        assumptions: [
          {
            id: "1",
            text: "Using standard OAuth 2.0 flow",
            confidence: 0.9,
            accepted: true,
          },
          {
            id: "2",
            text: "Redirect to dashboard after login",
            confidence: 0.7,
            accepted: true,
          },
          {
            id: "3",
            text: "Store minimal user profile data",
            confidence: 0.8,
            accepted: true,
          },
        ],
      }

      setAnalysis(mockAnalysis)
      setIsAnalyzing(false)
      setShowAnalysisModal(true)
    }, 2000)
  }

  const handleGeneratePrompts = async () => {
    if (!analysis) return

    setIsGenerating(true)

    setTimeout(() => {
      const mockPrompts: GeneratedPrompts = {
        cursor: `# OAuth Authentication Implementation

## Goal
Implement OAuth authentication with Google and GitHub providers for secure user login.

## Context
- Framework: Next.js (assumed)
- Authentication flow: OAuth 2.0
- Session management: Secure cookies
- User roles: Standard user access

## Requirements
- Support Google OAuth
- Support GitHub OAuth  
- Secure session handling
- Proper error handling
- Redirect to dashboard after login

## Implementation Plan
1. Install authentication library (NextAuth.js recommended)
2. Configure OAuth providers in environment
3. Create authentication API routes
4. Implement login/logout components
5. Add session middleware
6. Handle error states

## Acceptance Criteria
- Users can sign in with Google
- Users can sign in with GitHub
- Sessions persist across browser restarts
- Proper error messages for failed authentication

## Output Format
Provide working code with proper TypeScript types and error handling.`,

        copilot: `Create OAuth authentication system with the following specifications:

GOAL: Implement secure OAuth login with Google and GitHub

TECHNICAL REQUIREMENTS:
- OAuth 2.0 standard compliance
- Secure cookie-based sessions
- Support for Google and GitHub providers
- Proper error handling and user feedback
- Redirect to dashboard after successful login

IMPLEMENTATION STEPS:
1. Set up OAuth provider configurations
2. Create authentication routes and handlers
3. Implement login/logout UI components
4. Add session management middleware
5. Handle authentication errors gracefully

CONSTRAINTS:
- Must store minimal user data
- Follow security best practices
- Implement proper CSRF protection
- Use environment variables for secrets

Please generate the complete authentication system with TypeScript support.`,

        warp: `# OAuth Authentication Setup

## Objective
Build OAuth authentication supporting Google and GitHub login

## Technical Specs
- OAuth 2.0 implementation
- Secure session management
- Error handling for auth failures
- Dashboard redirect on success

## Development Tasks
1. Configure OAuth applications (Google/GitHub)
2. Set up authentication library
3. Create login/logout flows
4. Implement session middleware
5. Add error handling

## Environment Setup
- GOOGLE_CLIENT_ID
- GOOGLE_CLIENT_SECRET  
- GITHUB_CLIENT_ID
- GITHUB_CLIENT_SECRET
- NEXTAUTH_SECRET
- NEXTAUTH_URL

Generate the authentication system with proper security measures.`,

        windsurf: `## OAuth Authentication Implementation

### Project Goal
Create secure OAuth authentication system with Google and GitHub providers

### Technical Requirements
- OAuth 2.0 standard implementation
- Secure cookie-based session management
- Support for multiple OAuth providers (Google, GitHub)
- Comprehensive error handling
- Post-login dashboard redirect

### Architecture Components
1. **Authentication Provider Setup**
   - Google OAuth configuration
   - GitHub OAuth configuration
   - Environment variable management

2. **Session Management**
   - Secure cookie storage
   - Session persistence
   - Automatic token refresh

3. **UI Components**
   - Login form with provider buttons
   - Logout functionality
   - Loading and error states

4. **Security Measures**
   - CSRF protection
   - Secure token storage
   - Input validation

### Implementation Approach
Build a complete authentication system following OAuth 2.0 standards with proper TypeScript typing and comprehensive error handling.`,
      }

      setPrompts(mockPrompts)
      setIsGenerating(false)
      setCurrentPage("prompt")
      setShowAnalysisModal(false)
    }, 1500)
  }

  const handleUpdateAnalysis = (updatedAnalysis: Analysis) => {
    setAnalysis(updatedAnalysis)
    setPrompts(null)
  }

  const renderNavigation = () => (
    <div className="flex justify-center mb-8">
      <div className="flex bg-muted p-1 rounded-full border">
        <Button
          variant={currentPage === "requirement" ? "default" : "ghost"}
          onClick={() => setCurrentPage("requirement")}
          className="rounded-full px-6"
        >
          Requirement
        </Button>
        <Button
          variant={currentPage === "analyse" ? "default" : "ghost"}
          onClick={() => setCurrentPage("analyse")}
          className="rounded-full px-6"
          disabled={!analysis}
        >
          Analyse
        </Button>
        <Button
          variant={currentPage === "prompt" ? "default" : "ghost"}
          onClick={() => setCurrentPage("prompt")}
          className="rounded-full px-6"
          disabled={!prompts}
        >
          Prompt
        </Button>
      </div>
    </div>
  )

  const renderPageContent = () => {
    switch (currentPage) {
      case "requirement":
        return (
          <div className="max-w-2xl mx-auto">
            <RequirementInput
              value={requirement}
              onChange={setRequirement}
              onAnalyze={handleAnalyze}
              isAnalyzing={isAnalyzing}
            />
          </div>
        )
      case "analyse":
        return (
          <div className="max-w-4xl mx-auto">
            <Card>
              <CardContent className="p-6">
                <div className="text-center">
                  <h2 className="text-2xl font-bold mb-4">Analysis Complete</h2>
                  <p className="text-muted-foreground mb-6">
                    Your requirement has been analyzed. Click below to view details or generate prompts.
                  </p>
                  <div className="flex gap-4 justify-center">
                    <Button onClick={() => setShowAnalysisModal(true)} variant="outline">
                      View Analysis Details
                    </Button>
                    <Button onClick={handleGeneratePrompts} disabled={isGenerating}>
                      {isGenerating ? "Generating..." : "Generate Prompts"}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )
      case "prompt":
        return prompts ? <PromptsPage prompts={prompts} /> : null
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />

      <div className="container mx-auto px-4 py-6">
        {renderNavigation()}
        {renderPageContent()}
      </div>

      {showAnalysisModal && analysis && (
        <AnalysisModal
          analysis={analysis}
          onUpdate={handleUpdateAnalysis}
          onGeneratePrompts={handleGeneratePrompts}
          isGenerating={isGenerating}
          onClose={() => setShowAnalysisModal(false)}
        />
      )}
    </div>
  )
}



================================================
FILE: landing-page/page.tsx
================================================
import { redirect } from "next/navigation"

export default function Home() {
  redirect("/landing")
}



================================================
FILE: lib/ai-service.ts
================================================
import { geminiService, GeminiError } from "./gemini"
import { openaiService, OpenAIError } from "./openai"
import { AIProvider } from "./ai-types"

export class AIError extends Error {
  constructor(message: string, public code?: string, public provider?: AIProvider) {
    super(message)
    this.name = "AIError"
  }
}

export interface AIServiceInterface {
  generateResponse(prompt: string): Promise<string>
  generateStructuredResponse<T>(prompt: string, schema?: string): Promise<T>
}

export class UnifiedAIService implements AIServiceInterface {
  private provider: AIProvider

  constructor(provider: AIProvider = "gemini") {
    this.provider = provider
  }

  setProvider(provider: AIProvider) {
    console.log(`[AI Service] Switching from ${this.provider} to ${provider}`)
    this.provider = provider
  }

  getProvider(): AIProvider {
    return this.provider
  }

  async generateResponse(prompt: string): Promise<string> {
    const startTime = Date.now()
    console.log(`[AI Service] Generating response with ${this.provider}`)
    
    try {
      let response: string
      
      if (this.provider === "gemini") {
        response = await geminiService.generateResponse(prompt)
      } else {
        response = await openaiService.generateResponse(prompt)
      }
      
      const duration = Date.now() - startTime
      console.log(`[AI Service] ${this.provider} response generated in ${duration}ms`)
      
      return response
    } catch (error) {
      const duration = Date.now() - startTime
      console.error(`[AI Service] ${this.provider} error after ${duration}ms:`, error)
      
      if (error instanceof GeminiError) {
        throw new AIError(error.message, error.code, "gemini")
      } else if (error instanceof OpenAIError) {
        throw new AIError(error.message, error.code, "openai")
      }
      throw new AIError(
        error instanceof Error ? error.message : "Unknown error occurred",
        "UNKNOWN_ERROR",
        this.provider
      )
    }
  }

  async generateStructuredResponse<T>(prompt: string, schema?: string): Promise<T> {
    const startTime = Date.now()
    console.log(`[AI Service] Generating structured response with ${this.provider}`)
    
    try {
      let response: T
      
      if (this.provider === "gemini") {
        response = await geminiService.generateStructuredResponse<T>(prompt, schema)
      } else {
        response = await openaiService.generateStructuredResponse<T>(prompt, schema)
      }
      
      const duration = Date.now() - startTime
      console.log(`[AI Service] ${this.provider} structured response generated in ${duration}ms`)
      
      return response
    } catch (error) {
      const duration = Date.now() - startTime
      console.error(`[AI Service] ${this.provider} structured response error after ${duration}ms:`, error)
      
      if (error instanceof GeminiError) {
        throw new AIError(error.message, error.code, "gemini")
      } else if (error instanceof OpenAIError) {
        throw new AIError(error.message, error.code, "openai")
      }
      throw new AIError(
        error instanceof Error ? error.message : "Unknown error occurred",
        "UNKNOWN_ERROR",
        this.provider
      )
    }
  }

  // Helper method to get provider display name
  getProviderDisplayName(): string {
    return this.provider === "gemini" ? "Google Gemini" : "OpenAI GPT-4"
  }

  // Helper method to get provider icon/emoji
  getProviderIcon(): string {
    return this.provider === "gemini" ? "🤖" : "🧠"
  }

  // Helper method to get provider status
  getProviderStatus(): { status: "ready" | "error" | "unknown"; message: string } {
    try {
      // Basic validation that the service is configured
      if (this.provider === "gemini") {
        return { status: "ready", message: "Gemini service configured" }
      } else if (this.provider === "openai") {
        return { status: "ready", message: "OpenAI service configured" }
      }
      return { status: "unknown", message: "Unknown provider" }
    } catch (error) {
      return { status: "error", message: `Service error: ${error instanceof Error ? error.message : "Unknown"}` }
    }
  }
}

// Export singleton instance
export const aiService = new UnifiedAIService()

// Export provider constants
export const AI_PROVIDERS = {
  GEMINI: "gemini" as const,
  OPENAI: "openai" as const,
} as const



================================================
FILE: lib/ai-types.ts
================================================
export type AIProvider = "gemini" | "openai"

export const AI_PROVIDERS = {
  GEMINI: "gemini" as const,
  OPENAI: "openai" as const,
} as const





================================================
FILE: lib/analysis-service.ts
================================================
import { aiService, AIProvider } from "./ai-service"
import { buildAnalysisPrompt } from "./prompt-templates"
import { promptConfig } from "./prompt-config"
import { logPromptUsage } from "./telemetry"
import type { Analysis, Question, Assumption } from "@/app/page"

export interface RequirementFormData {
  taskType?: string
  goal?: string
  components?: string[]
  inputs?: string
  outputs?: string
  referenceFiles?: File[]
  referenceUrls?: string[]
  requirement?: string
  context?: string
}

export interface AnalysisRequest {
  requirement: string
  formData?: RequirementFormData
}

export interface AnalysisResponse extends Analysis {}

export class AnalysisService {
  async analyzeRequirement(
    requirement: string, 
    context: string = "", 
    formData?: RequirementFormData,
    provider: AIProvider = "gemini"
  ): Promise<Analysis> {
    // Build structured requirement text from form data
    let structuredRequirement = requirement
    
    if (formData) {
      const parts: string[] = []
      
      if (formData.taskType) {
        parts.push(`Task Type: ${formData.taskType}`)
      }
      
      if (formData.goal) {
        parts.push(`Goal: ${formData.goal}`)
      }
      
      if (formData.components && formData.components.length > 0) {
        parts.push(`Components/Files Affected: ${formData.components.join(", ")}`)
      }
      
      if (formData.inputs) {
        parts.push(`Expected Inputs: ${formData.inputs}`)
      }
      
      if (formData.outputs) {
        parts.push(`Expected Outputs: ${formData.outputs}`)
      }
      
      if (formData.referenceUrls && formData.referenceUrls.length > 0) {
        parts.push(`Reference URLs: ${formData.referenceUrls.join(", ")}`)
      }
      
      if (formData.referenceFiles && formData.referenceFiles.length > 0) {
        const fileNames = formData.referenceFiles.map(f => f.name).join(", ")
        parts.push(`Reference Files: ${fileNames}`)
      }
      
      if (parts.length > 0) {
        const structuredPart = parts.join("\n")
        structuredRequirement = requirement 
          ? `${requirement}\n\nStructured Details:\n${structuredPart}`
          : structuredPart
      }
    }

    // If supplemental context is very large (e.g. repository markdown), summarize first
    let summarizedContext = context
    if (context && context.length > 16000) {
      const summarizationPrompt = `
You are an expert software architect. Summarize the following repository or product documentation into a concise implementation context.

Focus on:
- Primary goals and user-facing features
- Tech stack, architecture notes, key modules
- APIs/endpoints, data models, integrations
- Constraints, non-functional requirements, security/compliance
- Notable edge cases and assumptions

Write a clear, structured brief (bulleted where helpful) in under 2500 words. Preserve important details; omit marketing fluff.

INPUT CONTEXT:
${context}`

      try {
        // Set the provider before generating response
        aiService.setProvider(provider)
        summarizedContext = await aiService.generateResponse(summarizationPrompt)
      } catch (e) {
        summarizedContext = context
      }
    }

    const jsonSchema = `{
  "goals": ["string"],
  "constraints": ["string"],
  "dependencies": ["string"],
  "edgeCases": ["string"],
  "acceptanceCriteria": ["string"],
  "questions": [{"id": "string", "text": "string", "priority": "critical|important|nice-to-have"}],
  "assumptions": [{"id": "string", "text": "string", "confidence": 0.0, "accepted": true}]
}`

    const prompt = buildAnalysisPrompt({
      requirement: structuredRequirement,
      context: summarizedContext,
      jsonSchema,
    })

    try {
      const t0 = Date.now()
      // Set the provider before generating response
      aiService.setProvider(provider)
      const response = await aiService.generateStructuredResponse<AnalysisResponse>(prompt)
      
      // Validate and ensure all required fields are present
      const analysis: Analysis = {
        goals: response.goals || [],
        constraints: response.constraints || [],
        dependencies: response.dependencies || [],
        edgeCases: response.edgeCases || [],
        acceptanceCriteria: response.acceptanceCriteria || [],
        questions: (response.questions || []).map((q, index) => ({
          id: q.id || `q${index + 1}`,
          text: q.text,
          priority: q.priority as Question["priority"],
          answer: undefined,
        })),
        assumptions: (response.assumptions || []).map((a, index) => ({
          id: a.id || `a${index + 1}`,
          text: a.text,
          confidence: Math.max(0, Math.min(1, a.confidence || 0.5)), // Clamp to [0,1]
          accepted: a.accepted !== false, // Default to true
        })),
      }

      logPromptUsage({
        template: "analysis",
        version: promptConfig.version,
        mode: promptConfig.mode,
        inputChars: prompt.length,
        outputChars: JSON.stringify(response || {}).length,
        latencyMs: Date.now() - t0,
        parseOk: true,
        repairAttempts: 0,
      })

      return analysis
    } catch (error) {
      console.error("Error analyzing requirement:", error)
      throw error
    }
  }

  async generateAdditionalQuestions(
    requirement: string, 
    currentAnalysis: Analysis, 
    answeredQuestions: Question[]
  ): Promise<Question[]> {
    const answeredQuestionsText = answeredQuestions
      .map(q => `Q: ${q.text}\nA: ${q.answer}`)
      .join("\n\n")

    const currentAnalysisText = `Goals: ${currentAnalysis.goals.join(", ")}
Constraints: ${currentAnalysis.constraints.join(", ")}
Dependencies: ${currentAnalysis.dependencies.join(", ")}`

    const jsonSchema = `{"questions":[{"id":"string","text":"string","priority":"critical|important|nice-to-have"}]}`

    const prompt = `You are an expert software architect and requirements analyst.

Generate additional clarifying questions for the given requirement based on the current analysis and already answered questions.

REQUIREMENT:
${requirement}

CURRENT ANALYSIS:
${currentAnalysisText}

ANSWERED QUESTIONS:
${answeredQuestionsText}

SCHEMA:
${jsonSchema}

Respond with valid JSON only, matching the schema exactly.`

    try {
      const response = await aiService.generateStructuredResponse<{ questions: Question[] }>(prompt)
      
      return (response.questions || []).map((q, index) => ({
        id: q.id || `new_q${Date.now()}_${index}`,
        text: q.text,
        priority: q.priority as Question["priority"],
        answer: undefined,
      }))
    } catch (error) {
      console.error("Error generating additional questions:", error)
      return []
    }
  }

  async refineAnalysis(
    requirement: string,
    currentAnalysis: Analysis,
    answeredQuestions: Question[],
    acceptedAssumptions: Assumption[]
  ): Promise<Partial<Analysis>> {
    const answeredQuestionsText = answeredQuestions
      .filter(q => q.answer?.trim())
      .map(q => `Q: ${q.text}\nA: ${q.answer}`)
      .join("\n\n")

    const acceptedAssumptionsText = acceptedAssumptions
      .filter(a => a.accepted)
      .map(a => `- ${a.text} (confidence: ${Math.round(a.confidence * 100)}%)`)
      .join("\n")

    const currentAnalysisText = `Goals: ${currentAnalysis.goals.join(", ")}
Constraints: ${currentAnalysis.constraints.join(", ")}
Dependencies: ${currentAnalysis.dependencies.join(", ")}
Edge Cases: ${currentAnalysis.edgeCases.join(", ")}
Acceptance Criteria: ${currentAnalysis.acceptanceCriteria.join(", ")}`

    const jsonSchema = `{"goals":["string"],"constraints":["string"],"dependencies":["string"],"edgeCases":["string"],"acceptanceCriteria":["string"]}`

    const prompt = `You are an expert software architect and requirements analyst.

Refine the current analysis based on new information from answered questions and accepted assumptions.

REQUIREMENT:
${requirement}

CURRENT ANALYSIS:
${currentAnalysisText}

NEW INFORMATION:
${answeredQuestionsText}

ACCEPTED ASSUMPTIONS:
${acceptedAssumptionsText}

SCHEMA:
${jsonSchema}

Respond with valid JSON only, matching the schema exactly.`

    try {
      const response = await aiService.generateStructuredResponse<Partial<Analysis>>(prompt)
      return response
    } catch (error) {
      console.error("Error refining analysis:", error)
      return {}
    }
  }

  async createIteration(
    requirement: string,
    previousAnalysis: Analysis,
    iterationNumber: number,
    context: string = "",
    formData?: RequirementFormData,
    userEdits?: Partial<Analysis>,
    userFeedback?: string
  ): Promise<Analysis> {
    // Build structured requirement text from form data (same as initial analysis)
    let structuredRequirement = requirement
    
    if (formData) {
      const parts: string[] = []
      
      if (formData.taskType) {
        parts.push(`Task Type: ${formData.taskType}`)
      }
      
      if (formData.goal) {
        parts.push(`Goal: ${formData.goal}`)
      }
      
      if (formData.components && formData.components.length > 0) {
        parts.push(`Components/Files Affected: ${formData.components.join(", ")}`)
      }
      
      if (formData.inputs) {
        parts.push(`Expected Inputs: ${formData.inputs}`)
      }
      
      if (formData.outputs) {
        parts.push(`Expected Outputs: ${formData.outputs}`)
      }
      
      if (formData.referenceUrls && formData.referenceUrls.length > 0) {
        parts.push(`Reference URLs: ${formData.referenceUrls.join(", ")}`)
      }
      
      if (formData.referenceFiles && formData.referenceFiles.length > 0) {
        const fileNames = formData.referenceFiles.map(f => f.name).join(", ")
        parts.push(`Reference Files: ${fileNames}`)
      }
      
      if (parts.length > 0) {
        const structuredPart = parts.join("\n")
        structuredRequirement = requirement 
          ? `${requirement}\n\nStructured Details:\n${structuredPart}`
          : structuredPart
      }
    }

    // Summarize context if needed (same as initial analysis)
    let summarizedContext = context
    if (context && context.length > 16000) {
      const summarizationPrompt = `
You are an expert software architect. Summarize the following repository or product documentation into a concise implementation context.

Focus on:
- Primary goals and user-facing features
- Tech stack, architecture notes, key modules
- APIs/endpoints, data models, integrations
- Constraints, non-functional requirements, security/compliance
- Notable edge cases and assumptions

Write a clear, structured brief (bulleted where helpful) in under 2500 words. Preserve important details; omit marketing fluff.

INPUT CONTEXT:
${context}`

      try {
        summarizedContext = await aiService.generateResponse(summarizationPrompt)
      } catch (e) {
        summarizedContext = context
      }
    }

    // Format previous analysis for context
    const previousAnalysisText = `
PREVIOUS ANALYSIS (Iteration ${iterationNumber - 1}):
Goals: ${previousAnalysis.goals.join(", ")}
Constraints: ${previousAnalysis.constraints.join(", ")}
Dependencies: ${previousAnalysis.dependencies.join(", ")}
Edge Cases: ${previousAnalysis.edgeCases.join(", ")}
Acceptance Criteria: ${previousAnalysis.acceptanceCriteria.join(", ")}
Questions: ${previousAnalysis.questions.map(q => `${q.text} ${q.answer ? `(Answered: ${q.answer})` : '(Unanswered)'}`).join(", ")}
Assumptions: ${previousAnalysis.assumptions.map(a => `${a.text} (${a.accepted ? 'Accepted' : 'Rejected'}, Confidence: ${Math.round(a.confidence * 100)}%)`).join(", ")}`

    // Format user edits if provided
    let userEditsText = ""
    if (userEdits) {
      const editParts: string[] = []
      if (userEdits.goals) editParts.push(`Goals: ${userEdits.goals.join(", ")}`)
      if (userEdits.constraints) editParts.push(`Constraints: ${userEdits.constraints.join(", ")}`)
      if (userEdits.dependencies) editParts.push(`Dependencies: ${userEdits.dependencies.join(", ")}`)
      if (userEdits.edgeCases) editParts.push(`Edge Cases: ${userEdits.edgeCases.join(", ")}`)
      if (userEdits.acceptanceCriteria) editParts.push(`Acceptance Criteria: ${userEdits.acceptanceCriteria.join(", ")}`)
      if (userEdits.questions) editParts.push(`Questions: ${userEdits.questions.map(q => q.text).join(", ")}`)
      if (userEdits.assumptions) editParts.push(`Assumptions: ${userEdits.assumptions.map(a => a.text).join(", ")}`)
      
      if (editParts.length > 0) {
        userEditsText = `\n\nUSER EDITS:\n${editParts.join("\n")}`
      }
    }

    // Format user feedback if provided
    const feedbackText = userFeedback ? `\n\nUSER FEEDBACK:\n${userFeedback}` : ""

    const jsonSchema = `{
  "goals": ["string"],
  "constraints": ["string"],
  "dependencies": ["string"],
  "edgeCases": ["string"],
  "acceptanceCriteria": ["string"],
  "questions": [{"id": "string", "text": "string", "priority": "critical|important|nice-to-have"}],
  "assumptions": [{"id": "string", "text": "string", "confidence": 0.0, "accepted": true}]
}`

    const prompt = `You are an expert software architect and requirements analyst.

This is ITERATION ${iterationNumber} of an analysis refinement process. Create an improved analysis based on:
1. The original requirement
2. Previous analysis results
3. User edits and feedback
4. Context information

Focus on:
- Incorporating user feedback and edits
- Addressing gaps or issues from the previous iteration
- Refining and improving the analysis quality
- Adding new insights while preserving valuable previous work
- Generating better questions and assumptions

ORIGINAL REQUIREMENT:
${structuredRequirement}

CONTEXT:
${summarizedContext}
${previousAnalysisText}${userEditsText}${feedbackText}

SCHEMA:
${jsonSchema}

Respond with valid JSON only, matching the schema exactly. Make this iteration meaningfully better than the previous one.`

    try {
      const t0 = Date.now()
      const response = await aiService.generateStructuredResponse<AnalysisResponse>(prompt)
      
      // Validate and ensure all required fields are present
      const analysis: Analysis = {
        goals: response.goals || [],
        constraints: response.constraints || [],
        dependencies: response.dependencies || [],
        edgeCases: response.edgeCases || [],
        acceptanceCriteria: response.acceptanceCriteria || [],
        questions: (response.questions || []).map((q, index) => ({
          id: q.id || `iter${iterationNumber}_q${index + 1}`,
          text: q.text,
          priority: q.priority as Question["priority"],
          answer: undefined,
        })),
        assumptions: (response.assumptions || []).map((a, index) => ({
          id: a.id || `iter${iterationNumber}_a${index + 1}`,
          text: a.text,
          confidence: Math.max(0, Math.min(1, a.confidence || 0.5)), // Clamp to [0,1]
          accepted: a.accepted !== false, // Default to true
        })),
      }

      logPromptUsage({
        template: `analysis_iteration_${iterationNumber}`,
        version: promptConfig.version,
        mode: promptConfig.mode,
        inputChars: prompt.length,
        outputChars: JSON.stringify(response || {}).length,
        latencyMs: Date.now() - t0,
        parseOk: true,
        repairAttempts: 0,
      })

      return analysis
    } catch (error) {
      console.error(`Error creating iteration ${iterationNumber}:`, error)
      
      // Enhanced error handling for iterations
      if (error instanceof Error) {
        // Add iteration context to error message
        const enhancedError = new Error(
          `Iteration ${iterationNumber} failed: ${error.message}`
        )
        enhancedError.name = 'IterationError'
        enhancedError.stack = error.stack
        throw enhancedError
      }
      
      // Fallback for unknown errors
      const iterationError = new Error(
        `Failed to create iteration ${iterationNumber}: Unknown error occurred`
      )
      iterationError.name = 'IterationError'
      throw iterationError
    }
  }
}

export const analysisService = new AnalysisService()



================================================
FILE: lib/env.ts
================================================
import { z } from "zod"

const envSchema = z.object({
  GEMINI_API_KEY: z.string().min(1, "Gemini API key is required"),
  OPENAI_API_KEY: z.string().min(1, "OpenAI API key is required"),
  NEXT_PUBLIC_APP_URL: z.string().url().optional(),
})

export const env = envSchema.parse({
  GEMINI_API_KEY: process.env.GEMINI_API_KEY,
  OPENAI_API_KEY: process.env.OPENAI_API_KEY,
  NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
})

export type Env = z.infer<typeof envSchema>



================================================
FILE: lib/gemini.ts
================================================
import { GoogleGenerativeAI } from "@google/generative-ai"
import { env } from "./env"

export class GeminiError extends Error {
  constructor(message: string, public code?: string) {
    super(message)
    this.name = "GeminiError"
  }
}

class GeminiService {
  private genAI: GoogleGenerativeAI
  private model: any

  constructor() {
    this.genAI = new GoogleGenerativeAI(env.GEMINI_API_KEY)
    this.model = this.genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 8192,
      },
    })
  }

  async generateResponse(prompt: string): Promise<string> {
    try {
      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const text = response.text()
      
      if (!text?.trim()) {
        throw new GeminiError("Empty response from Gemini API")
      }
      
      return text.trim()
    } catch (error: any) {
      if (error.status === 429) {
        throw new GeminiError("Rate limit exceeded. Please try again later.", "RATE_LIMIT")
      } else if (error.status === 401) {
        throw new GeminiError("Invalid API key or unauthorized access.", "UNAUTHORIZED")
      } else if (error.status === 403) {
        throw new GeminiError("API access forbidden. Check your permissions.", "FORBIDDEN")
      } else if (error.message?.includes("network")) {
        throw new GeminiError("Network error. Please check your connection.", "NETWORK_ERROR")
      }
      
      throw new GeminiError(
        error.message || "An unexpected error occurred while generating response",
        "UNKNOWN_ERROR"
      )
    }
  }

  async generateStructuredResponse<T>(prompt: string, schema?: string): Promise<T> {
    const structuredPrompt = schema
      ? `${prompt}\n\nRespond with valid JSON that matches this schema exactly: ${schema}`
      : `${prompt}\n\nRespond with valid JSON only, no additional text.`

    const start = Date.now()
    const response = await this.generateResponse(structuredPrompt)
    
    try {
      return JSON.parse(response) as T
    } catch (parseError) {
      // Try to extract JSON from the response if it contains extra text
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        try {
          return JSON.parse(jsonMatch[0]) as T
        } catch (secondParseError) {
          throw new GeminiError("Failed to parse structured response", "PARSE_ERROR")
        }
      }
      throw new GeminiError("Invalid JSON response from Gemini", "INVALID_JSON")
    }
  }
}

// Singleton instance
export const geminiService = new GeminiService()

// Rate limiting helper
export class RateLimiter {
  private requests: number[] = []
  private maxRequests: number
  private windowMs: number

  constructor(maxRequests = 10, windowMs = 60000) { // 10 requests per minute by default
    this.maxRequests = maxRequests
    this.windowMs = windowMs
  }

  canMakeRequest(): boolean {
    const now = Date.now()
    this.requests = this.requests.filter(time => now - time < this.windowMs)
    return this.requests.length < this.maxRequests
  }

  recordRequest(): void {
    this.requests.push(Date.now())
  }
}

export const rateLimiter = new RateLimiter()



================================================
FILE: lib/iteration-utils.ts
================================================
import type { Analysis } from "@/app/page"
import type { AnalysisIteration } from "@/components/iteration-display"

export interface AnalysisComparison {
  field: string
  oldValue: string[]
  newValue: string[]
  changeType: 'added' | 'removed' | 'modified' | 'unchanged'
}

export interface IterationComparison {
  goals: AnalysisComparison
  constraints: AnalysisComparison
  dependencies: AnalysisComparison
  edgeCases: AnalysisComparison
  acceptanceCriteria: AnalysisComparison
  questions: {
    added: number
    removed: number
    modified: number
    total: number
  }
  assumptions: {
    added: number
    removed: number
    modified: number
    total: number
  }
}

export function compareAnalyses(oldAnalysis: Analysis, newAnalysis: Analysis): IterationComparison {
  const compareArrayFields = (
    oldArray: string[], 
    newArray: string[], 
    fieldName: string
  ): AnalysisComparison => {
    const added = newArray.filter(item => !oldArray.includes(item))
    const removed = oldArray.filter(item => !newArray.includes(item))
    
    let changeType: 'added' | 'removed' | 'modified' | 'unchanged' = 'unchanged'
    if (added.length > 0 && removed.length > 0) {
      changeType = 'modified'
    } else if (added.length > 0) {
      changeType = 'added'
    } else if (removed.length > 0) {
      changeType = 'removed'
    }

    return {
      field: fieldName,
      oldValue: oldArray,
      newValue: newArray,
      changeType
    }
  }

  const compareQuestions = () => {
    const oldQuestions = oldAnalysis.questions.map(q => q.text)
    const newQuestions = newAnalysis.questions.map(q => q.text)
    
    return {
      added: newQuestions.filter(q => !oldQuestions.includes(q)).length,
      removed: oldQuestions.filter(q => !newQuestions.includes(q)).length,
      modified: 0, // For now, we'll consider text changes as add/remove
      total: newAnalysis.questions.length
    }
  }

  const compareAssumptions = () => {
    const oldAssumptions = oldAnalysis.assumptions.map(a => a.text)
    const newAssumptions = newAnalysis.assumptions.map(a => a.text)
    
    return {
      added: newAssumptions.filter(a => !oldAssumptions.includes(a)).length,
      removed: oldAssumptions.filter(a => !newAssumptions.includes(a)).length,
      modified: 0, // For now, we'll consider text changes as add/remove
      total: newAnalysis.assumptions.length
    }
  }

  return {
    goals: compareArrayFields(oldAnalysis.goals, newAnalysis.goals, 'goals'),
    constraints: compareArrayFields(oldAnalysis.constraints, newAnalysis.constraints, 'constraints'),
    dependencies: compareArrayFields(oldAnalysis.dependencies, newAnalysis.dependencies, 'dependencies'),
    edgeCases: compareArrayFields(oldAnalysis.edgeCases, newAnalysis.edgeCases, 'edgeCases'),
    acceptanceCriteria: compareArrayFields(oldAnalysis.acceptanceCriteria, newAnalysis.acceptanceCriteria, 'acceptanceCriteria'),
    questions: compareQuestions(),
    assumptions: compareAssumptions()
  }
}

export function getIterationSummary(iteration: AnalysisIteration): string {
  const { analysis } = iteration
  const totalItems = analysis.goals.length + 
                    analysis.constraints.length + 
                    analysis.dependencies.length + 
                    analysis.edgeCases.length + 
                    analysis.acceptanceCriteria.length

  const questionsSummary = analysis.questions.length > 0 
    ? `${analysis.questions.length} questions` 
    : 'no questions'
  
  const assumptionsSummary = analysis.assumptions.length > 0 
    ? `${analysis.assumptions.length} assumptions (${analysis.assumptions.filter(a => a.accepted).length} accepted)`
    : 'no assumptions'

  return `${totalItems} analysis items, ${questionsSummary}, ${assumptionsSummary}`
}

export function validateIterationData(iteration: AnalysisIteration): boolean {
  if (!iteration.id || !iteration.analysis || !iteration.timestamp) {
    return false
  }

  const { analysis } = iteration
  
  // Check if analysis has required structure
  const requiredFields = ['goals', 'constraints', 'dependencies', 'edgeCases', 'acceptanceCriteria', 'questions', 'assumptions']
  
  for (const field of requiredFields) {
    if (!(field in analysis) || !Array.isArray(analysis[field as keyof Analysis])) {
      return false
    }
  }

  return true
}

export function exportIterationHistory(iterations: AnalysisIteration[]): string {
  const exportData = {
    exportedAt: new Date().toISOString(),
    totalIterations: iterations.length,
    iterations: iterations.map(iteration => ({
      iterationNumber: iteration.iterationNumber,
      timestamp: iteration.timestamp,
      isUserSatisfied: iteration.isUserSatisfied,
      userFeedback: iteration.userFeedback,
      summary: getIterationSummary(iteration),
      analysis: iteration.analysis
    }))
  }

  return JSON.stringify(exportData, null, 2)
}

export function calculateIterationMetrics(iterations: AnalysisIteration[]) {
  if (iterations.length === 0) {
    return {
      totalIterations: 0,
      satisfiedIterations: 0,
      averageItemsPerIteration: 0,
      iterationTrend: 'stable' as 'increasing' | 'decreasing' | 'stable'
    }
  }

  const satisfiedIterations = iterations.filter(iter => iter.isUserSatisfied).length
  
  const itemCounts = iterations.map(iter => {
    const { analysis } = iter
    return analysis.goals.length + 
           analysis.constraints.length + 
           analysis.dependencies.length + 
           analysis.edgeCases.length + 
           analysis.acceptanceCriteria.length
  })

  const averageItemsPerIteration = itemCounts.reduce((sum, count) => sum + count, 0) / itemCounts.length

  // Determine trend (simple comparison of first half vs second half)
  let iterationTrend: 'increasing' | 'decreasing' | 'stable' = 'stable'
  if (itemCounts.length >= 4) {
    const midpoint = Math.floor(itemCounts.length / 2)
    const firstHalfAvg = itemCounts.slice(0, midpoint).reduce((sum, count) => sum + count, 0) / midpoint
    const secondHalfAvg = itemCounts.slice(midpoint).reduce((sum, count) => sum + count, 0) / (itemCounts.length - midpoint)
    
    if (secondHalfAvg > firstHalfAvg * 1.1) {
      iterationTrend = 'increasing'
    } else if (secondHalfAvg < firstHalfAvg * 0.9) {
      iterationTrend = 'decreasing'
    }
  }

  return {
    totalIterations: iterations.length,
    satisfiedIterations,
    averageItemsPerIteration: Math.round(averageItemsPerIteration * 10) / 10,
    iterationTrend
  }
}



================================================
FILE: lib/openai.ts
================================================
import OpenAI from "openai"
import { env } from "./env"

export class OpenAIError extends Error {
  constructor(message: string, public code?: string) {
    super(message)
    this.name = "OpenAIError"
  }
}

class OpenAIService {
  private openai: OpenAI
  private model: string

  constructor() {
    this.openai = new OpenAI({
      apiKey: env.OPENAI_API_KEY,
    })
    this.model = "gpt-4o-mini" // Using GPT-4o-mini for cost-effectiveness and good performance
  }

  async generateResponse(prompt: string): Promise<string> {
    try {
      const completion = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: "user",
            content: prompt,
          },
        ],
        temperature: 0.7,
        max_tokens: 8192,
        top_p: 0.8,
      })

      const response = completion.choices[0]?.message?.content
      
      if (!response?.trim()) {
        throw new OpenAIError("Empty response from OpenAI API")
      }
      
      return response.trim()
    } catch (error: any) {
      if (error.status === 429) {
        throw new OpenAIError("Rate limit exceeded. Please try again later.", "RATE_LIMIT")
      } else if (error.status === 401) {
        throw new OpenAIError("Invalid API key or unauthorized access.", "UNAUTHORIZED")
      } else if (error.status === 403) {
        throw new OpenAIError("API access forbidden. Check your permissions.", "FORBIDDEN")
      } else if (error.message?.includes("network")) {
        throw new OpenAIError("Network error. Please check your connection.", "NETWORK_ERROR")
      } else if (error.code === "insufficient_quota") {
        throw new OpenAIError("Insufficient quota. Please check your OpenAI account.", "QUOTA_EXCEEDED")
      }
      
      throw new OpenAIError(
        error.message || "An unexpected error occurred while generating response",
        "UNKNOWN_ERROR"
      )
    }
  }

  async generateStructuredResponse<T>(prompt: string, schema?: string): Promise<T> {
    const structuredPrompt = schema
      ? `${prompt}\n\nRespond with valid JSON that matches this schema exactly: ${schema}`
      : `${prompt}\n\nRespond with valid JSON only, no additional text.`

    const start = Date.now()
    const response = await this.generateResponse(structuredPrompt)
    
    try {
      return JSON.parse(response) as T
    } catch (parseError) {
      // Try to extract JSON from the response if it contains extra text
      const jsonMatch = response.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        try {
          return JSON.parse(jsonMatch[0]) as T
        } catch (secondParseError) {
          throw new OpenAIError("Failed to parse structured response", "PARSE_ERROR")
        }
      }
      throw new OpenAIError("Invalid JSON response from OpenAI", "INVALID_JSON")
    }
  }
}

// Singleton instance
export const openaiService = new OpenAIService()

// Rate limiting helper (same interface as Gemini for consistency)
export class OpenAIRateLimiter {
  private requests: number[] = []
  private maxRequests: number
  private windowMs: number

  constructor(maxRequests = 10, windowMs = 60000) { // 10 requests per minute by default
    this.maxRequests = maxRequests
    this.windowMs = windowMs
  }

  canMakeRequest(): boolean {
    const now = Date.now()
    this.requests = this.requests.filter(time => now - time < this.windowMs)
    return this.requests.length < this.maxRequests
  }

  recordRequest(): void {
    this.requests.push(Date.now())
  }
}

// Export rate limiter instance
export const openaiRateLimiter = new OpenAIRateLimiter()



================================================
FILE: lib/prompt-config.ts
================================================
export type PromptMode = "stable" | "exp"

export interface PromptConfig {
  version: string
  mode: PromptMode
}

export const promptConfig: PromptConfig = {
  version: process.env.PROMPT_VERSION || new Date().toISOString().slice(0, 10),
  mode: (process.env.PROMPT_MODE as PromptMode) || "stable",
}





================================================
FILE: lib/prompt-service.ts
================================================
import { aiService, AIProvider } from "./ai-service"
import type { Analysis, Question, Assumption, GeneratedPrompts } from "@/app/page"

export interface RequirementFormData {
  taskType?: string
  goal?: string
  components?: string[]
  inputs?: string
  outputs?: string
  referenceFiles?: any
  referenceUrls?: string[]
  requirement?: string
  context?: string
}

export interface PromptGenerationRequest {
  requirement: string
  formData?: RequirementFormData
  analysis: Analysis
  answeredQuestions: Question[]
  acceptedAssumptions: Assumption[]
  provider?: AIProvider
}

export class PromptService {
  async generateIDEPrompts({
    requirement,
    formData,
    analysis,
    answeredQuestions,
    acceptedAssumptions,
    provider = "gemini",
  }: PromptGenerationRequest): Promise<GeneratedPrompts> {
    // Build structured requirement from form data if available
    let structuredRequirement = requirement
    if (formData) {
      const parts: string[] = []
      if (formData.taskType) parts.push(`Task Type: ${formData.taskType}`)
      if (formData.goal) parts.push(`Goal: ${formData.goal}`)
      if (formData.components && formData.components.length > 0) {
        parts.push(`Components/Files Affected: ${formData.components.join(', ')}`)
      }
      if (formData.inputs) parts.push(`Expected Inputs: ${formData.inputs}`)
      if (formData.outputs) parts.push(`Expected Outputs: ${formData.outputs}`)
      if (formData.referenceUrls && formData.referenceUrls.length > 0) {
        parts.push(`Reference URLs: ${formData.referenceUrls.join(', ')}`)
      }
      if (formData.referenceFiles && formData.referenceFiles.length > 0) {
        const fileNames = formData.referenceFiles.map((f: any) => f.name || f).join(', ')
        parts.push(`Reference Files: ${fileNames}`)
      }
      
      if (parts.length > 0) {
        structuredRequirement = requirement 
          ? `${requirement}\n\nStructured Details:\n${parts.join('\n')}`
          : parts.join('\n')
      }
    }
    // Filter answered questions and accepted assumptions
    const relevantQuestions = answeredQuestions.filter(q => q.answer?.trim())
    const relevantAssumptions = acceptedAssumptions.filter(a => a.accepted)

    // Set the provider before generating prompts
    aiService.setProvider(provider)
    
    // Generate prompts for each IDE in parallel
    const [cursor, copilot, warp, windsurf] = await Promise.all([
      this.generateCursorPrompt({ requirement: structuredRequirement, analysis, relevantQuestions, relevantAssumptions }),
      this.generateCopilotPrompt({ requirement: structuredRequirement, analysis, relevantQuestions, relevantAssumptions }),
      this.generateWarpPrompt({ requirement: structuredRequirement, analysis, relevantQuestions, relevantAssumptions }),
      this.generateWindsurfPrompt({ requirement: structuredRequirement, analysis, relevantQuestions, relevantAssumptions }),
    ])

    return { cursor, copilot, warp, windsurf }
  }

  private async generateCursorPrompt({
    requirement,
    analysis,
    relevantQuestions,
    relevantAssumptions,
  }: {
    requirement: string
    analysis: Analysis
    relevantQuestions: Question[]
    relevantAssumptions: Assumption[]
  }): Promise<string> {
    const questionsContext = relevantQuestions.length > 0
      ? `\n\nCLARIFICATIONS:\n${relevantQuestions.map(q => `Q: ${q.text}\nA: ${q.answer}`).join('\n\n')}`
      : ""

    const assumptionsContext = relevantAssumptions.length > 0
      ? `\n\nACCEPTED ASSUMPTIONS:\n${relevantAssumptions.map(a => `- ${a.text} (${Math.round(a.confidence * 100)}% confidence)`).join('\n')}`
      : ""

    const prompt = `
Create a comprehensive Cursor IDE prompt for implementing the following feature. Cursor works best with detailed context, step-by-step implementation plans, and clear structure.

ORIGINAL REQUIREMENT:
${requirement}

ANALYSIS RESULTS:
• Goals: ${analysis.goals.join(', ')}
• Constraints: ${analysis.constraints.join(', ')}
• Dependencies: ${analysis.dependencies.join(', ')}
• Edge Cases: ${analysis.edgeCases.join(', ')}
• Acceptance Criteria: ${analysis.acceptanceCriteria.join(', ')}${questionsContext}${assumptionsContext}

Generate a Cursor-optimized prompt that includes:
1. Clear goal statement
2. Technical context and framework assumptions
3. Detailed implementation plan with numbered steps
4. Code structure recommendations
5. Testing approach
6. Error handling considerations
7. Expected output format

Format the response as a well-structured prompt that a developer could paste directly into Cursor IDE. Use markdown formatting for better readability.`

    return await aiService.generateResponse(prompt)
  }

  private async generateCopilotPrompt({
    requirement,
    analysis,
    relevantQuestions,
    relevantAssumptions,
  }: {
    requirement: string
    analysis: Analysis
    relevantQuestions: Question[]
    relevantAssumptions: Assumption[]
  }): Promise<string> {
    const questionsContext = relevantQuestions.length > 0
      ? `\n\nCLARIFICATIONS:\n${relevantQuestions.map(q => `Q: ${q.text}\nA: ${q.answer}`).join('\n\n')}`
      : ""

    const assumptionsContext = relevantAssumptions.length > 0
      ? `\n\nACCEPTED ASSUMPTIONS:\n${relevantAssumptions.map(a => `- ${a.text}`).join('\n')}`
      : ""

    const prompt = `
Create a GitHub Copilot prompt optimized for code generation. Copilot works best with concise, specific instructions and clear technical requirements.

ORIGINAL REQUIREMENT:
${requirement}

ANALYSIS RESULTS:
• Goals: ${analysis.goals.join(', ')}
• Constraints: ${analysis.constraints.join(', ')}
• Dependencies: ${analysis.dependencies.join(', ')}
• Edge Cases: ${analysis.edgeCases.join(', ')}
• Acceptance Criteria: ${analysis.acceptanceCriteria.join(', ')}${questionsContext}${assumptionsContext}

Generate a Copilot-optimized prompt that includes:
1. Concise goal statement
2. Technical specifications
3. Implementation steps
4. Key constraints and requirements
5. Expected behavior description
6. Code generation guidance

Format as a direct, actionable prompt that will help Copilot generate accurate code suggestions. Keep it focused and specific.`

    return await aiService.generateResponse(prompt)
  }

  private async generateWarpPrompt({
    requirement,
    analysis,
    relevantQuestions,
    relevantAssumptions,
  }: {
    requirement: string
    analysis: Analysis
    relevantQuestions: Question[]
    relevantAssumptions: Assumption[]
  }): Promise<string> {
    const questionsContext = relevantQuestions.length > 0
      ? `\n\nCLARIFICATIONS:\n${relevantQuestions.map(q => `Q: ${q.text}\nA: ${q.answer}`).join('\n\n')}`
      : ""

    const assumptionsContext = relevantAssumptions.length > 0
      ? `\n\nACCEPTED ASSUMPTIONS:\n${relevantAssumptions.map(a => `- ${a.text}`).join('\n')}`
      : ""

    const prompt = `
Create a Warp terminal-focused prompt for implementing the following feature. Warp excels at command-line operations, environment setup, and development workflows.

ORIGINAL REQUIREMENT:
${requirement}

ANALYSIS RESULTS:
• Goals: ${analysis.goals.join(', ')}
• Constraints: ${analysis.constraints.join(', ')}
• Dependencies: ${analysis.dependencies.join(', ')}
• Edge Cases: ${analysis.edgeCases.join(', ')}
• Acceptance Criteria: ${analysis.acceptanceCriteria.join(', ')}${questionsContext}${assumptionsContext}

Generate a Warp-optimized prompt that includes:
1. Objective statement
2. Environment setup requirements
3. Command-line workflow steps
4. Development tasks breakdown
5. Testing commands
6. Deployment considerations
7. Required environment variables or configuration

Format as a terminal-focused guide that emphasizes command-line tools, scripts, and development workflow automation.`

    return await aiService.generateResponse(prompt)
  }

  private async generateWindsurfPrompt({
    requirement,
    analysis,
    relevantQuestions,
    relevantAssumptions,
  }: {
    requirement: string
    analysis: Analysis
    relevantQuestions: Question[]
    relevantAssumptions: Assumption[]
  }): Promise<string> {
    const questionsContext = relevantQuestions.length > 0
      ? `\n\nCLARIFICATIONS:\n${relevantQuestions.map(q => `Q: ${q.text}\nA: ${q.answer}`).join('\n\n')}`
      : ""

    const assumptionsContext = relevantAssumptions.length > 0
      ? `\n\nACCEPTED ASSUMPTIONS:\n${relevantAssumptions.map(a => `- ${a.text}`).join('\n')}`
      : ""

    const prompt = `
Create a Windsurf IDE prompt for implementing the following feature. Windsurf focuses on comprehensive project architecture, component design, and collaborative development.

ORIGINAL REQUIREMENT:
${requirement}

ANALYSIS RESULTS:
• Goals: ${analysis.goals.join(', ')}
• Constraints: ${analysis.constraints.join(', ')}
• Dependencies: ${analysis.dependencies.join(', ')}
• Edge Cases: ${analysis.edgeCases.join(', ')}
• Acceptance Criteria: ${analysis.acceptanceCriteria.join(', ')}${questionsContext}${assumptionsContext}

Generate a Windsurf-optimized prompt that includes:
1. Project goal and scope
2. Technical requirements and architecture
3. Component breakdown and design patterns
4. Implementation approach with detailed phases
5. Security and performance considerations
6. Testing and quality assurance strategy
7. Documentation requirements

Format as a comprehensive project brief that covers architecture, implementation strategy, and collaborative development considerations. Emphasize system design and best practices.`

    return await aiService.generateResponse(prompt)
  }

  async generateCustomPrompt(
    ideType: string,
    requirement: string,
    analysis: Analysis,
    relevantQuestions: Question[],
    relevantAssumptions: Assumption[]
  ): Promise<string> {
    const questionsContext = relevantQuestions.length > 0
      ? `\n\nCLARIFICATIONS:\n${relevantQuestions.map(q => `Q: ${q.text}\nA: ${q.answer}`).join('\n\n')}`
      : ""

    const assumptionsContext = relevantAssumptions.length > 0
      ? `\n\nACCEPTED ASSUMPTIONS:\n${relevantAssumptions.map(a => `- ${a.text}`).join('\n')}`
      : ""

    const prompt = `
Create a prompt optimized for ${ideType} IDE for implementing the following feature.

ORIGINAL REQUIREMENT:
${requirement}

ANALYSIS RESULTS:
• Goals: ${analysis.goals.join(', ')}
• Constraints: ${analysis.constraints.join(', ')}
• Dependencies: ${analysis.dependencies.join(', ')}
• Edge Cases: ${analysis.edgeCases.join(', ')}
• Acceptance Criteria: ${analysis.acceptanceCriteria.join(', ')}${questionsContext}${assumptionsContext}

Generate a prompt tailored for ${ideType} that includes:
1. Clear objective
2. Technical specifications
3. Implementation guidance
4. Best practices for ${ideType}
5. Expected deliverables

Format the response appropriately for ${ideType}'s workflow and capabilities.`

    return await aiService.generateResponse(prompt)
  }

  async improvePrompt({
    originalPrompt,
    ideType,
    improvementInstructions,
    requirement,
    analysis
  }: {
    originalPrompt: string
    ideType: string
    improvementInstructions: string
    requirement?: string
    analysis?: Analysis
  }): Promise<string> {
    const contextInfo = requirement && analysis ? `

ORIGINAL CONTEXT:
Requirement: ${requirement}
Goals: ${analysis.goals.join(', ')}
Constraints: ${analysis.constraints.join(', ')}
Dependencies: ${analysis.dependencies.join(', ')}
` : ""

    const prompt = `
Improve the following ${ideType} IDE prompt based on the user's feedback and instructions.

ORIGINAL PROMPT:
${originalPrompt}

USER IMPROVEMENT INSTRUCTIONS:
${improvementInstructions}${contextInfo}

Generate an improved version of the prompt that:
1. Addresses the user's specific feedback
2. Maintains the original intent and structure
3. Enhances clarity and effectiveness
4. Remains optimized for ${ideType} IDE
5. Incorporates best practices for prompt engineering

Return only the improved prompt without additional commentary.`

    return await aiService.generateResponse(prompt)
  }
}

export const promptService = new PromptService()



================================================
FILE: lib/prompt-templates.ts
================================================
import { promptConfig } from "./prompt-config"

export const SYSTEM_RULES = `
[SYSTEM]
Role: You are an expert software requirements analyst and software architect.
Rules:
- Use only the provided information; do not invent facts.
- If information is missing, ask targeted questions (avoid yes/no; request examples/constraints).
- In conflicts, REQUIREMENT takes precedence over CONTEXT unless the requirement defers to legacy behavior.
- Never reveal chain-of-thought or internal reasoning. When structured output is requested, respond with JSON only.
- Be specific, concise, and testable in your outputs.
- Avoid PII; do not include secrets or keys.
Version: ${promptConfig.version} (${promptConfig.mode})
`

export const ANALYSIS_INSTRUCT = `
[TASK: ANALYSIS]
Analyze REQUIREMENT + CONTEXT and produce structured JSON:
- goals (3–5) measurable and outcome-focused
- constraints (2–4) technical/business/regulatory
- dependencies (2–4) systems/libraries/prereqs
- edgeCases (3–5)
- acceptanceCriteria (3–6) using Given/When/Then
- questions (2–4) with priority: critical|important|nice-to-have
- assumptions (2–4) with confidence 0.0–1.0
Rules: no duplicates; IDs stable/deterministic; JSON only.
`

export const QUESTIONS_INSTRUCT = `
[TASK: QUESTIONS]
Generate 1–3 high-value clarifying questions that reduce risk/ambiguity.
Prioritize impact on design, data, UX, and constraints. Avoid overlaps with answered ones.
Return JSON only with an array of questions and required fields.
`

export const REFINE_INSTRUCT = `
[TASK: REFINE]
Refine analysis based on new answers/assumptions. Return only fields that materially change.
Do not regress previously accepted items. Preserve voice/format. JSON only.
`

export function buildAnalysisPrompt({ requirement, context, jsonSchema }: { requirement: string; context?: string; jsonSchema: string }) {
  return `${SYSTEM_RULES}\n${ANALYSIS_INSTRUCT}

REQUIREMENT:
${requirement}

CONTEXT:
${(context || "").trim() || "(none)"}

SCHEMA:
${jsonSchema}
\nRespond with valid JSON only, matching the schema exactly.`
}

export function buildQuestionsPrompt({ requirement, currentAnalysis, answeredQuestionsSchema }: { requirement: string; currentAnalysis: string; answeredQuestionsSchema: string }) {
  return `${SYSTEM_RULES}\n${QUESTIONS_INSTRUCT}

REQUIREMENT:
${requirement}

CURRENT ANALYSIS:
${currentAnalysis}

SCHEMA:
${answeredQuestionsSchema}
\nRespond with valid JSON only, matching the schema exactly.`
}

export function buildRefinePrompt({ requirement, currentAnalysis, answered, accepted, jsonSchema }: { requirement: string; currentAnalysis: string; answered: string; accepted: string; jsonSchema: string }) {
  return `${SYSTEM_RULES}\n${REFINE_INSTRUCT}

REQUIREMENT:
${requirement}

CURRENT ANALYSIS:
${currentAnalysis}

ANSWERED QUESTIONS:
${answered}

ACCEPTED ASSUMPTIONS:
${accepted}

SCHEMA:
${jsonSchema}
\nRespond with valid JSON only, matching the schema exactly.`
}





================================================
FILE: lib/session-utils.ts
================================================
// Session management utility to handle localStorage operations consistently
export const SESSION_KEYS = {
  ANALYSIS: "currentAnalysis",
  REQUIREMENT: "currentRequirement", 
  FORM_DATA: "currentFormData",
  PROMPTS: "currentPrompts",
  EDITED_PROMPTS: "currentEditedPrompts",
  ITERATIONS: "currentIterations",
  ITERATION_INDEX: "currentIterationIndex",
  AI_PROVIDER: "currentAIProvider",
} as const

export function clearAllSessionData(): void {
  Object.values(SESSION_KEYS).forEach(key => {
    try {
      localStorage.removeItem(key)
    } catch (error) {
      console.warn(`Failed to remove localStorage key: ${key}`, error)
    }
  })
}

export function clearSessionDataExcept(keysToKeep: string[] = []): void {
  Object.values(SESSION_KEYS).forEach(key => {
    if (!keysToKeep.includes(key)) {
      try {
        localStorage.removeItem(key)
      } catch (error) {
        console.warn(`Failed to remove localStorage key: ${key}`, error)
      }
    }
  })
}

export function getSessionData<T>(key: string): T | null {
  try {
    const data = localStorage.getItem(key)
    return data ? JSON.parse(data) : null
  } catch (error) {
    console.warn(`Failed to parse localStorage data for key: ${key}`, error)
    return null
  }
}

export function setSessionData<T>(key: string, data: T): void {
  try {
    localStorage.setItem(key, JSON.stringify(data))
  } catch (error) {
    console.warn(`Failed to save to localStorage for key: ${key}`, error)
  }
}



================================================
FILE: lib/telemetry.ts
================================================
type TelemetryEvent = {
  name: string
  data?: Record<string, unknown>
}

export function logEvent(event: TelemetryEvent) {
  try {
    // Simple console-based telemetry; replace with real sink later
    // eslint-disable-next-line no-console
    console.log(`[telemetry] ${event.name}`, JSON.stringify(event.data || {}))
  } catch {}
}

export function logPromptUsage(params: {
  template: string
  version: string
  mode: string
  inputChars: number
  outputChars?: number
  latencyMs?: number
  parseOk?: boolean
  repairAttempts?: number
}) {
  logEvent({ name: "prompt_usage", data: params })
}





================================================
FILE: lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================
FILE: styles/globals.css
================================================
@import 'tailwindcss';
@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


